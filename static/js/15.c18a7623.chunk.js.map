{"version":3,"sources":["Components/PaperEdits/PaperEdit/Transcripts/LabelsList/css-color-names.js","Components/PaperEdits/PaperEdit/Transcripts/LabelsList/ColorOptionsFormGroup.js","Components/PaperEdits/PaperEdit/Transcripts/Paragraphs/index.module.css","Components/PaperEdits/PaperEdit/Transcripts/LabelsList/select-color-styles.js","Components/PaperEdits/PaperEdit/Transcripts/SearchBar/select-speakers-color-styles.js","Components/PaperEdits/PaperEdit/Transcripts/SearchBar/index.js","Components/PaperEdits/PaperEdit/Transcripts/LabelsList/LabelForm.js","Components/PaperEdits/PaperEdit/Transcripts/LabelsList/LabelModal.js","Components/PaperEdits/PaperEdit/Transcripts/LabelsList/index.js","Util/only-call-once/index.js","Components/PaperEdits/PaperEdit/Transcripts/get-user-selection.js","Components/PaperEdits/PaperEdit/Transcripts/makeListOfUniqueSpeakers.js","Components/PaperEdits/PaperEdit/Transcripts/Transcript.js","Components/PaperEdits/PaperEdit/Transcripts/SearchBarTranscripts/select-speakers-color-styles.js","Components/PaperEdits/PaperEdit/Transcripts/SearchBarTranscripts/index.js","Components/PaperEdits/PaperEdit/Transcripts/index.js","Components/PaperEdits/PaperEdit/Transcripts/Paragraphs/group-words-by-speakers.js","Components/PaperEdits/PaperEdit/Transcripts/Paragraphs/find-annotation-in-paragraph.js","Components/PaperEdits/PaperEdit/Transcripts/Paragraphs/Paragraph.js","Util/remove-punctuation/index.js","Components/PaperEdits/PaperEdit/Transcripts/Paragraphs/Word.js","Components/PaperEdits/PaperEdit/Transcripts/Paragraphs/AnnotationOverlayTrigger.js","Components/PaperEdits/PaperEdit/Transcripts/Paragraphs/compute-paragraph-display-preference.js","Components/PaperEdits/PaperEdit/Transcripts/Paragraphs/add-annotations-to-words-in-paragraphs.js","Components/PaperEdits/PaperEdit/Transcripts/Paragraphs/index.js"],"names":["csscolors","colorNamesList","Object","freeze","keys","splice","cssColorsList","key","push","value","label","color","counter","numberOfColor","length","randomColor","ColorOptionsFormGroup","props","useState","setColor","handleSetColor","console","log","handleColorSelectChange","Group","controlId","Label","xs","sm","md","lg","xl","onClick","tmpColor","variant","size","icon","faSyncAlt","Control","type","placeholder","onChange","e","target","colorValue","chroma","valid","name","style","backgroundColor","border","borderWidth","borderColor","padding","Text","className","width","triangle","onChangeComplete","hex","colors","module","exports","colourStyles","control","styles","option","data","isDisabled","isFocused","isSelected","borderLeft","marginBottom","cursor","multiValue","multiValueLabel","multiValueRemove","speakersColorStyles","SearchBar","handleSpeakersSearchChange","selectedOptionSpeakerSearch","setState","handleLabelsSearchChange","selectedOptionLabelSearch","handleShowParagraphsMatchingSearch","state","showParagraphsMatchingSearch","handleFilterResults","isShowingFilterOptions","showTextSearchPreferences","showSpeakersSearchPreferences","showLabelsSearchPreferences","InputGroup","Prepend","faSearch","FormControl","handleSearch","aria-label","aria-describedby","Append","this","faFilter","title","Row","Col","ld","faTag","isMulti","isSearchable","options","labelsOptions","faUser","speakersOptions","Form","Check","checked","Component","LabelForm","context","handleSave","onLabelSaved","description","id","labelId","handleClose","alert","defaultValue","onInput","as","rows","Button","LabelModal","show","handleShow","block","openBtn","Modal","onHide","Header","closeButton","Title","Body","LabelsList","removeLabel","confirm","onLabelDelete","editLabel","labelToEdit","filter","newLabel","onLabelUpdate","onLabelCreate","showLabelModal","isLabelmodalShown","labelsListOptions","map","index","ListGroup","Item","toLowerCase","faPen","disabled","faTimes","labelsList","height","overflowY","overflowX","isLabelsListOpen","Card","faTags","faCog","onlyCallOnce","cb","duration","timer","args","arguments","clearTimeout","setTimeout","apply","getTimeFromUserWordsSelection","window","getSelection","isCollapsed","words","getRangeAt","cloneContents","querySelectorAll","start","parseFloat","dataset","end","word","anchorNode","parentElement","makeListOfUniqueSpeakers","array","result","Map","item","has","speaker","set","Paragraphs","React","lazy","Transcript","componentDidMount","ApiWrapper","getAllAnnotations","projectId","transcriptId","then","json","annotations","handleLoadTranscription","componentMounted","createLabel","labels","updatedLabel","updateLabel","labelIid","deleteLabel","handleTimecodeClick","classList","contains","wordEl","videoRef","current","currentTime","play","handleWordClick","isShowParagraphsMatchingSearch","searchPreferences","searchString","highlightWords","sentenceToSearchCSS","listOfSearchWords","trim","split","pCSS","join","wordsToSearchCSS","searchWord","res","wordsToSearchCSSInHighlights","sentenceToSearchCSSInHighlights","handleCreateAnnotation","element","selection","note","newAnnotation","createAnnotation","newAnnotationFromServer","annotation","newAnnotationsSet","JSON","parse","stringify","handleDeleteAnnotation","annotationId","deepCloneOfNestedObjectNewAnnotationsSet","deleteAnnotation","handleEditAnnotation","newAnnotationToEdit","find","newNote","prompt","updateAnnotation","getCurrentWordTime","transcript","currentWordTime","undefined","createRef","time","Math","round","highlights","scoped","floor","src","url","ref","onTimeUpdate","marginTop","boxShadow","controls","playsInline","paddingBottom","paddingTop","ButtonGroup","Dropdown","data-label-id","faHighlighter","flip","Toggle","data-lable-id","Menu","DropdownButton","drop","paragraphs","margin","onDoubleClick","overflow","status","fallback","Skeleton","transcriptJson","SearchBarTranscripts","handleTranscriptSearchChange","selectedOptionTranscriptSearch","handleShowAdvancedSearchViewSearchingAcrossTranscripts","faAngleLeft","searchValue","faFileAlt","transcriptOptions","Transcripts","selectedOptionTranscriptsSearch","prevState","showAdvancedSearchViewSearchingAcrossTranscripts","transcriptsElNav","transcripts","Nav","Link","eventKey","faClock","faExclamationTriangle","transcriptTitle","transcriptsOptions","transcriptsUniqueListOfSpeakers","reduce","prev","curr","concat","transcriptsUniqueListOfSpeakersNoDuplicates","Array","from","Set","searchBarTranscriptsElement","transcriptsElTab","Tab","Pane","searchedParagraphsAcrossTranscripts","t","Container","defaultActiveKey","Content","groupWordsInParagraphsBySpeakers","segments","results","currentSegmentIndex","previousSegmentIndex","paragraph","text","forEach","currentSegment","seg","findSegmentForWord","indexOf","addWordsToSpeakersParagraphs","findAnnotationInParagraph","paragraphFirstWordTime","paragraphLastWordTime","resultsCaseOne","isAnnotationWithinParagraph","resultsCaseTwo","isAnnotationStartWithinParagraph","resultsCase3","isAnnotationEndWithinParagraph","resultsCaseFour","isAnnotationAcrossParagraph","Paragraph","paragraphDisplayPreference","borderStyle","paragraphStyle","display","borderRight","data-paragraph-text","paragraphTextWithoutPunctuation","speakerName","toUpperCase","shortTimecode","unselectable","data-start","tabIndex","wordsElements","removePunctuation","string","replace","Word","generatePreviousTimes","prevTimes","i","dec","data-prev-times","data-text","data-end","data-transcript-id","data-speaker","role","aria-pressed","onKeyDown","handleKeyDownWords","AnnotationOverlayTrigger","overlayContent","annotationLabelId","OverlayTrigger","rootClose","trigger","placement","overlay","Popover","marginLeft","marginRight","faTrashAlt","faStickyNote","annotationNote","borderBottom","computeParagraphDisplayPreference","isTextSearch","isSpeakerSearch","isLabelSearch","displayPreference","addAnnotationsToWordsInParagraphs","paragraphsWithWordsSpeakerText","annotationForWord","wordStartTime","wordEndTime","isAnnotationWithinWord","addAnnotationToWordsInOneParagraph","handleKeyDownTimecodes","textResult","annotationInCurrentParagraph","includes","spk","lb"],"mappings":"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","file":"static/js/15.c18a7623.chunk.js","sourcesContent":["/**\n * List of CSS colors that have letters names as well as hex\n * originally from https://github.com/bahamas10/css-color-names#readme\n * TODO: filter list for colors that meets accessibility requirements and are bright enough\n * TODO: find a way to order this colours, by hue?\n */\nconst csscolors = {\n  'yellow': '#ffff00',\n  // '#ffeb3b': '#ffeb3b',\n  'greenyellow': '#adff2f',\n  'deepskyblue': '#00bfff',\n  'deeppink': '#ff1493',\n  // 'darkorange': '#ff8c00',\n  // 'aliceblue': '#f0f8ff',\n  // 'antiquewhite': '#faebd7',\n  'aqua': '#00ffff',\n  // 'azure': '#f0ffff',\n  // 'beige': '#f5f5dc',\n  // 'bisque': '#ffe4c4',\n  'black': '#000000',\n  // 'blanchedalmond': '#ffebcd',\n  'blueviolet': '#8a2be2',\n  'brown': '#a52a2a',\n  'burlywood': '#deb887',\n  'cadetblue': '#5f9ea0',\n  'chocolate': '#d2691e',\n  'coral': '#ff7f50',\n  // 'cornflowerblue': '#6495ed',\n  // 'cornsilk': '#fff8dc',\n  'crimson': '#dc143c',\n  // 'cyan': '#00ffff',\n  'darkblue': '#00008b',\n  'darkcyan': '#008b8b',\n  'darkgoldenrod': '#b8860b',\n  'darkgray': '#a9a9a9',\n  'darkgreen': '#006400',\n  // 'darkgrey': '#a9a9a9',\n  'darkkhaki': '#bdb76b',\n  'darkmagenta': '#8b008b',\n  'darkolivegreen': '#556b2f',\n  'darkorchid': '#9932cc',\n  'darkred': '#8b0000',\n  'darksalmon': '#e9967a',\n  'darkseagreen': '#8fbc8f',\n  'darkslateblue': '#483d8b',\n  'darkslategray': '#2f4f4f',\n  'darkslategrey': '#2f4f4f',\n  'darkturquoise': '#00ced1',\n  'darkviolet': '#9400d3',\n  'blue': '#0000ff',\n  'dimgray': '#696969',\n  'dimgrey': '#696969',\n  'dodgerblue': '#1e90ff',\n  'firebrick': '#b22222',\n  // 'floralwhite': '#fffaf0',\n  'forestgreen': '#228b22',\n  'fuchsia': '#ff00ff',\n  'gainsboro': '#dcdcdc',\n  // 'ghostwhite': '#f8f8ff',\n  'goldenrod': '#daa520',\n  'gold': '#ffd700',\n  'gray': '#808080',\n  'green': '#008000',\n  'grey': '#808080',\n  'honeydew': '#f0fff0',\n  'hotpink': '#ff69b4',\n  'indianred': '#cd5c5c',\n  'indigo': '#4b0082',\n  'ivory': '#fffff0',\n  'khaki': '#f0e68c',\n  'lavenderblush': '#fff0f5',\n  'lavender': '#e6e6fa',\n  'lawngreen': '#7cfc00',\n  'lemonchiffon': '#fffacd',\n  'lightblue': '#add8e6',\n  'lightcoral': '#f08080',\n  // 'lightcyan': '#e0ffff',\n  'lightgoldenrodyellow': '#fafad2',\n  'lightgray': '#d3d3d3',\n  'lightgreen': '#90ee90',\n  'lightgrey': '#d3d3d3',\n  'lightpink': '#ffb6c1',\n  'lightsalmon': '#ffa07a',\n  'lightseagreen': '#20b2aa',\n  'lightskyblue': '#87cefa',\n  'lightslategray': '#778899',\n  'lightslategrey': '#778899',\n  'lightsteelblue': '#b0c4de',\n  'lightyellow': '#ffffe0',\n  'lime': '#00ff00',\n  'chartreuse': '#7fff00',\n  'limegreen': '#32cd32',\n  'linen': '#faf0e6',\n  'magenta': '#ff00ff',\n  'maroon': '#800000',\n  'mediumblue': '#0000cd',\n  'mediumorchid': '#ba55d3',\n  'mediumpurple': '#9370db',\n  'mediumseagreen': '#3cb371',\n  'mediumslateblue': '#7b68ee',\n  'mediumspringgreen': '#00fa9a',\n  'mediumturquoise': '#48d1cc',\n  'mediumvioletred': '#c71585',\n  'midnightblue': '#191970',\n  'mintcream': '#f5fffa',\n  'mistyrose': '#ffe4e1',\n  'moccasin': '#ffe4b5',\n  // 'navajowhite': '#ffdead',\n  'navy': '#000080',\n  'oldlace': '#fdf5e6',\n  'olive': '#808000',\n  'olivedrab': '#6b8e23',\n  'orange': '#ffa500',\n  'orangered': '#ff4500',\n  'orchid': '#da70d6',\n  'palegoldenrod': '#eee8aa',\n  'palegreen': '#98fb98',\n  'paleturquoise': '#afeeee',\n  'palevioletred': '#db7093',\n  'papayawhip': '#ffefd5',\n  'peachpuff': '#ffdab9',\n  'peru': '#cd853f',\n  'pink': '#ffc0cb',\n  'plum': '#dda0dd',\n  'powderblue': '#b0e0e6',\n  'purple': '#800080',\n  'rebeccapurple': '#663399',\n  'red': '#ff0000',\n  'rosybrown': '#bc8f8f',\n  'royalblue': '#4169e1',\n  'saddlebrown': '#8b4513',\n  'salmon': '#fa8072',\n  'sandybrown': '#f4a460',\n  'seagreen': '#2e8b57',\n  'seashell': '#fff5ee',\n  'sienna': '#a0522d',\n  'silver': '#c0c0c0',\n  'skyblue': '#87ceeb',\n  'slateblue': '#6a5acd',\n  'slategray': '#708090',\n  'slategrey': '#708090',\n  'snow': '#fffafa',\n  'springgreen': '#00ff7f',\n  'steelblue': '#4682b4',\n  'tan': '#d2b48c',\n  'teal': '#008080',\n  'thistle': '#d8bfd8',\n  'tomato': '#ff6347',\n  'turquoise': '#40e0d0',\n  'violet': '#ee82ee',\n  'wheat': '#f5deb3',\n  // 'white': '#ffffff',\n  // 'whitesmoke': '#f5f5f5',\n  'yellowgreen': '#9acd32',\n  'aquamarine': '#7fffd4',\n  'mediumaquamarine': '#66cdaa'\n};\n\n/**\n * An array list of css colors\n */\nconst colorNamesList = Object.freeze(Object.keys(csscolors)\n  .splice(0, 15) // show only first 20 colours\n);\n\n/**\n * returns\n * {value: \"aliceblue\", label: \"aliceblue\", color: \"#f0f8ff\"}\n */\n// const cssColorsValueLabelColor = () => {\nconst cssColorsList = [];\nfor (var key in csscolors) {\n  cssColorsList.push({\n    value: key,\n    label:key,\n    color: csscolors[key]\n  });\n}\n// return cssColorsList;\n// };\n// const cssColorsValueLabelColor = Object.freeze(cssColorsList);\n\n/**\n * Random color\n */\nlet counter = -1;\nconst numberOfColor = colorNamesList.length;\nconst randomColor = () => {\n  if (counter < numberOfColor) {\n    counter += 1;\n  }\n  else {\n    counter = 0;\n  }\n\n  return colorNamesList[counter];\n};\n\nexport {\n  colorNamesList,\n  // cssColorsValueLabelColor,\n  randomColor\n};\n\nexport default csscolors;","import React, { useState } from 'react';\nimport { colorNamesList, randomColor } from './css-color-names.js';\nimport chroma from 'chroma-js';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { GithubPicker } from 'react-color';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faSyncAlt\n} from '@fortawesome/free-solid-svg-icons';\n\nfunction ColorOptionsFormGroup(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [color, setColor] = useState(props.color);\n\n  const handleSetColor = (color)=>{\n      console.log('handleSetColor', color);\n      setColor(color);\n      props.handleColorSelectChange(color);\n  }\n\n  const handleRandomiseColor =() => {\n    // this.setState({ color: randomColor() });\n    const tmpColor = randomColor();\n    handleSetColor(tmpColor)\n  }\n\n  const  handleColorPickerChangeComplete = (color) => {\n    // this.setState({ color: chroma(color.hex ).name() });\n    const tmpColor = chroma(color.hex).name();\n    handleSetColor(tmpColor)\n  }\n\n  const handleManualColorChange = (e) => {\n    if (e && e.target && e.target.value) {\n      const colorValue = e.target.value;\n      // this.setState({ color: chroma.valid(colorValue) ? chroma(colorValue).name() : colorValue });\n\n      const tmpColor = chroma.valid(colorValue) ? chroma(colorValue).name() : colorValue ;\n      handleSetColor(tmpColor)\n    }\n    else if (e && e.target && e.target.value === '') {\n      // this.setState({ color: '' });\n      handleSetColor('')\n    }\n  }\n\n  // const handleSave = () => {\n  //   // checks color in color picker input is valid - can be color name in letters or hex\n  //   if (chroma.valid(this.state.color)) {\n  //     // checks label name is not empty\n  //     if ( this.state.label !== '') {\n  //       this.props.onLabelSaved({\n  //         value: this.state.color,\n  //         label: this.state.label,\n  //         color: this.state.color,\n  //         description: this.state.description,\n  //         id: this.state.labelId\n  //       });\n\n  //       this.props.handleClose();\n  //     }\n  //     else {\n  //       alert('add a name to the label to be able to save');\n  //     }\n  //   }\n  //   else {\n  //     alert('choose a valid color');\n  //   }\n  // }\n\n\n\n  return (\n    \n <Form.Group controlId=\"formGroupPassword\">\n <Form.Label>Color</Form.Label>\n <Row>\n   <Col xs={ 2 } sm={ 1 } md={ 1 } lg={ 1 } xl={ 1 }>\n     <Button onClick={ handleRandomiseColor } variant=\"light\" size=\"sm\">\n       <FontAwesomeIcon icon={ faSyncAlt } />\n     </Button>\n   </Col>\n   <Col xs={ 6 } sm={ 6 } md={ 6 } lg={ 6 } xl={ 6 }>\n     <Form.Control\n       value={ color }\n       type=\"text\"\n       placeholder=\"#\"\n       onChange={ handleManualColorChange }\n     />\n   </Col>\n   <Col xs={ 2 } sm={ 2 } md={ 2 } lg={ 2 } xl={ 2 }\n     style={ {\n       backgroundColor: color,\n       border: 'solid',\n       borderWidth:'0.01em',\n       borderColor: 'grey',\n       padding: '1em'\n     } }>\n   </Col>\n </Row>\n <Row>\n   <Col xs={ 12 } sm={ 12 } md={ 12 } lg={ 12 } xl={ 12 } >\n     <Form.Text className=\"text-muted\">\n        To pick a color you can chose one at random, pick one form the list below, or type the name or hex code above.\n     </Form.Text>\n     <GithubPicker\n       width={ '100%' }\n       color={ color }\n       triangle={ 'hide' }\n       onChangeComplete={ handleColorPickerChangeComplete }\n       //   https://casesandberg.github.io/react-color/\n       colors={ colorNamesList }\n     />\n   </Col>\n </Row>\n</Form.Group>\n  );\n}\n\n\n\n\n\n\n\n\nexport default ColorOptionsFormGroup;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"speaker\":\"Paragraphs_speaker__1kdz6\",\"unselectable\":\"Paragraphs_unselectable__3k2Ob\",\"highlightedWord\":\"Paragraphs_highlightedWord__3mJtY\"};","// helper funciton for adding colors to labels in react-select component\n// https://react-select.com/styles\n// import chroma from 'chroma-js';\n\nconst colourStyles = {\n  control: styles => ({ ...styles, backgroundColor: 'white' }),\n  option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n    // const color = chroma(data.color);\n\n    const tmpBackgroundColor = null;// 'black;\n    // if (isDisabled) {\n    //   tmpBackgroundColor = null;\n    // }\n    // if (isSelected) {\n    //   tmpBackgroundColor = data.color;\n    // }\n    // if (isFocused) {\n    //   tmpBackgroundColor = color.alpha(0.1).css();\n    // }\n\n    const tmpColor = data.color;\n    // if (isDisabled) {\n    //   tmpColor = '#ccc';\n    // }\n    // if (isSelected) {\n    //   tmpColor = chroma.contrast(color, 'white') > 2\n    //     ? 'white'\n    //     : 'black';\n    // }\n\n    return {\n      ...styles,\n      backgroundColor: tmpBackgroundColor,\n      borderLeft: '1.5em solid',\n      borderColor: tmpColor,\n      marginBottom: '0.4em',\n      // color: tmpColor,\n      cursor: isDisabled ? 'not-allowed' : 'default'\n    };\n  },\n  //   return {\n  //     ...styles,\n  //     backgroundColor: isDisabled\n  //       ? null\n  //       : isSelected\n  //         ? data.color\n  //         : isFocused\n  //           ? color.alpha(0.1).css()\n  //           : null, //'black'\n  //     color: isDisabled\n  //       ? '#ccc'\n  //       : isSelected\n  //         ? chroma.contrast(color, 'white') > 2\n  //           ? 'white'\n  //           : 'black'\n  //         : data.color,\n  //     cursor: isDisabled ? 'not-allowed' : 'default'\n  //   };\n  // },\n  // singleValue: (provided, state) => {\n  //   const opacity = state.isDisabled ? 0.5 : 1;\n  //   const transition = 'opacity 300ms';\n\n  //   return { ...provided, opacity, transition };\n  // },\n  multiValue: (styles, { data }) => {\n    // const color = chroma(data.color);\n\n    return {\n      ...styles,\n      // backgroundColor: color.alpha(0.1).css()\n      backgroundColor: 'white',\n      border: '0.05em solid',\n      borderLeft: '1.2em solid',\n      borderColor: data.color,\n    };\n  },\n  multiValueLabel: (styles, { data }) => ({\n    ...styles,\n    // color: data.color\n  }),\n  multiValueRemove: (styles, { data }) => ({\n    ...styles,\n    // color: data.color,\n    // ':hover': {\n    //   backgroundColor: data.color,\n    //   color: 'white'\n    // }\n  })\n};\n\nexport default colourStyles;\n","// helper function for adding custom stylings to speakers in react-select component in search bar\n// https://react-select.com/styles\n\nconst speakersColorStyles = {\n  control: styles => ({ ...styles, backgroundColor: 'white' }),\n  option: (styles) => {\n\n    const tmpBackgroundColor = null;\n\n    return {\n      ...styles,\n      backgroundColor: tmpBackgroundColor,\n      cursor:'default'\n    };\n  },\n\n  multiValue: (styles) => {\n\n    return {\n      ...styles,\n      backgroundColor: 'white',\n      border: '0.05em solid grey'\n    };\n  },\n  multiValueLabel: (styles) => ({\n    ...styles\n  }),\n  multiValueRemove: (styles) => ({\n    ...styles\n  })\n};\n\nexport default speakersColorStyles;\n","import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Select from 'react-select';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFilter, faTag, faUser, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport colourStyles from '../LabelsList/select-color-styles.js';\nimport speakersColorStyles from './select-speakers-color-styles.js';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isShowingFilterOptions: false,\n      showParagraphsMatchingSearch: false,\n      showTextSearchPreferences: false,\n      showSpeakersSearchPreferences: false,\n      showLabelsSearchPreferences: false,\n    };\n  }\n\n  handleSpeakersSearchChange = selectedOptionSpeakerSearch => {\n    this.props.handleSpeakersSearchChange(selectedOptionSpeakerSearch);\n    this.setState({ selectedOptionSpeakerSearch });\n  };\n\n  handleLabelsSearchChange = selectedOptionLabelSearch => {\n    console.log('handleLabelsSearchChange', selectedOptionLabelSearch);\n    this.props.handleLabelsSearchChange(selectedOptionLabelSearch);\n    this.setState({ selectedOptionLabelSearch });\n  };\n\n  handleShowParagraphsMatchingSearch = () => {\n    this.setState(\n      state => {\n        this.props.handleShowParagraphsMatchingSearch(!state.showParagraphsMatchingSearch);\n        return { showParagraphsMatchingSearch: !state.showParagraphsMatchingSearch };\n      },\n      () => {}\n    );\n  };\n\n  handleFilterResults = () => {\n    this.setState(state => {\n      if (!state.isShowingFilterOptions) {\n        this.props.handleShowParagraphsMatchingSearch(true);\n        return {\n          isShowingFilterOptions: true,\n          showTextSearchPreferences: true,\n          showSpeakersSearchPreferences: true,\n          showLabelsSearchPreferences: true,\n          // defaults to show only matching paragraph to be checked\n          showParagraphsMatchingSearch: true,\n        };\n      } else {\n        this.props.handleShowParagraphsMatchingSearch(false);\n        return {\n          isShowingFilterOptions: false,\n          showTextSearchPreferences: false,\n          showSpeakersSearchPreferences: false,\n          showLabelsSearchPreferences: false,\n          // remove preferences for showing matching paragraphjs when removing filters\n          showParagraphsMatchingSearch: false,\n        };\n      }\n    });\n  };\n\n  /* TODO: move searchBar to a Search Toolbar component? */\n  render() {\n    return (\n      <>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Prepend>\n            <InputGroup.Text>\n              <FontAwesomeIcon icon={faSearch} />\n            </InputGroup.Text>\n          </InputGroup.Prepend>\n          {/* Search */}\n          <FormControl\n            //  TODO: pass labels, speakers, and paragraph pref\n            onChange={e => {\n              this.props.handleSearch(e, {\n                showParagraphsMatchingSearch: this.state.showParagraphsMatchingSearch,\n                showLabelsSearchPreferences: this.state.showLabelsSearchPreferences,\n                showSpeakersSearchPreferences: this.state.showSpeakersSearchPreferences,\n              });\n            }}\n            placeholder=\"Search text...\"\n            aria-label=\"search\"\n            aria-describedby=\"search\"\n          />\n          <InputGroup.Append>\n            <InputGroup.Text style={{ cursor: 'pointer' }} onClick={this.handleFilterResults}>\n              <FontAwesomeIcon icon={faFilter} title=\"Filter results\" />\n            </InputGroup.Text>\n\n            {/* </Button> */}\n          </InputGroup.Append>\n        </InputGroup>\n\n        {this.state.showLabelsSearchPreferences ? (\n          <>\n            <Row className=\"mb-3\">\n              <Col xs={1} sm={1} md={1} ld={1} xl={1}>\n                <InputGroup.Prepend>\n                  <InputGroup.Text>\n                    <FontAwesomeIcon icon={faTag} />\n                  </InputGroup.Text>\n                </InputGroup.Prepend>\n              </Col>\n              <Col xs={10} sm={11} md={11} ld={11} xl={11}>\n                <Select\n                  value={this.state.selectedOptionLabelSearch}\n                  onChange={this.handleLabelsSearchChange}\n                  isMulti\n                  isSearchable\n                  options={this.props.labelsOptions}\n                  styles={colourStyles}\n                  placeholder={'Filter by labels...'}\n                />\n              </Col>\n            </Row>\n          </>\n        ) : (\n          ''\n        )}\n\n        {this.state.showSpeakersSearchPreferences ? (\n          <>\n            <Row className=\"mb-3\">\n              <Col xs={1} sm={1} md={1} ld={1} xl={1}>\n                <InputGroup.Prepend>\n                  <InputGroup.Text>\n                    <FontAwesomeIcon icon={faUser} />\n                  </InputGroup.Text>\n                </InputGroup.Prepend>\n              </Col>\n              <Col xs={10} sm={11} md={11} ld={11} xl={11}>\n                <Select\n                  value={this.state.selectedOptionSpeakerSearch}\n                  onChange={this.handleSpeakersSearchChange}\n                  isMulti\n                  isSearchable\n                  options={this.props.speakersOptions}\n                  styles={speakersColorStyles}\n                  placeholder={'Filter by speakers...'}\n                />\n              </Col>\n            </Row>\n          </>\n        ) : (\n          ''\n        )}\n\n        {this.state.showTextSearchPreferences ? (\n          <>\n            <Form.Check\n              type=\"checkbox\"\n              checked={this.state.showParagraphsMatchingSearch}\n              onChange={this.handleShowParagraphsMatchingSearch}\n              label={\n                <>\n                  <Form.Text className=\"text-muted\" title=\"Show only matching paragraphs\" onClick={this.handleShowParagraphsMatchingSearch}>\n                    Show only matching paragraphs\n                  </Form.Text>\n                </>\n              }\n            />\n          </>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from 'react';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import {\n//   faSyncAlt\n// } from '@fortawesome/free-solid-svg-icons';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n// import Row from 'react-bootstrap/Row';\n// import Col from 'react-bootstrap/Col';\n// import { GithubPicker } from 'react-color';\n// import { colorNamesList, randomColor } from './css-color-names.js';\nimport chroma from 'chroma-js';\nimport ColorOptionsFormGroup from './ColorOptionsFormGroup.js'\n\nclass LabelForm extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      color: this.props.color,\n      label: this.props.label,\n      description: this.props.description,\n      labelId: this.props.labelId\n    };\n  }\n\n  // handleRandomiseColor =() => {\n  //   this.setState({ color: randomColor() });\n  // }\n\n  // handleColorPickerChangeComplete = (color) => {\n  //   this.setState({ color: chroma(color.hex ).name() });\n  // }\n\n  // handleManualColorChange = (e) => {\n  //   if (e && e.target && e.target.value) {\n  //     const colorValue = e.target.value;\n  //     this.setState({ color: chroma.valid(colorValue) ? chroma(colorValue).name() : colorValue });\n  //   }\n  //   else if (e && e.target && e.target.value === '') {\n  //     this.setState({ color: '' });\n  //   }\n  // }\n\n  // TODO: not used?\n  // handleColorSelectChange = color => {\n  //   this.setState({ color: color.color });\n  // };\n\n  handleColorSelectChange = color => {\n    this.setState({ color: color });\n  };\n\n  handleSave = () => {\n    // checks color in color picker input is valid - can be color name in letters or hex\n    if (chroma.valid(this.state.color)) {\n      // checks label name is not empty\n      if ( this.state.label !== '') {\n        this.props.onLabelSaved({\n          value: this.state.color,\n          label: this.state.label,\n          color: this.state.color,\n          description: this.state.description,\n          id: this.state.labelId\n        });\n\n        this.props.handleClose();\n      }\n      else {\n        alert('add a name to the label to be able to save');\n      }\n    }\n    else {\n      alert('choose a valid color');\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Form>\n          <Form.Group controlId=\"formGroupEmail\">\n            <Form.Label>Label Name </Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter label name\"\n              defaultValue={ this.state.label }\n              onInput={ (e) => {this.setState({ label: e.target.value });} }\n            />\n            <Form.Text className=\"text-muted\">\n                    Required label name\n            </Form.Text>\n          </Form.Group>\n          <Form.Group controlId=\"formGroupPassword\">\n            <Form.Label>Label Description</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter label description\"\n              defaultValue={ this.state.description }\n              as=\"textarea\" rows=\"3\"\n              onInput={ (e) => { this.setState({ description: e.target.value });} }\n            />\n            <Form.Text className=\"text-muted\">\n                    Optional label description\n            </Form.Text>\n          </Form.Group>\n\n\n          <ColorOptionsFormGroup\n          color={this.props.color}\n          handleColorSelectChange={this.handleColorSelectChange}\n          />\n          {/* <Form.Group controlId=\"formGroupPassword\">\n            <Form.Label>Color</Form.Label>\n            <Row>\n              <Col xs={ 2 } sm={ 1 } md={ 1 } lg={ 1 } xl={ 1 }>\n                <Button onClick={ this.handleRandomiseColor } variant=\"light\" size=\"sm\">\n                  <FontAwesomeIcon icon={ faSyncAlt } />\n                </Button>\n              </Col>\n              <Col xs={ 6 } sm={ 6 } md={ 6 } lg={ 6 } xl={ 6 }>\n                <Form.Control\n                  value={ this.state.color }\n                  type=\"text\"\n                  placeholder=\"#\"\n                  onChange={ this.handleManualColorChange }\n                />\n              </Col>\n              <Col xs={ 2 } sm={ 2 } md={ 2 } lg={ 2 } xl={ 2 }\n                style={ {\n                  backgroundColor: this.state.color,\n                  border: 'solid',\n                  borderWidth:'0.01em',\n                  borderColor: 'grey',\n                  padding: '1em'\n                } }>\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={ 12 } sm={ 12 } md={ 12 } lg={ 12 } xl={ 12 } >\n                <Form.Text className=\"text-muted\">\n                   To pick a color you can chose one at random, pick one form the list below, or type the name or hex code above.\n                </Form.Text>\n                <GithubPicker\n                  width={ '100%' }\n                  color={ this.state.color }\n                  triangle={ 'hide' }\n                  onChangeComplete={ this.handleColorPickerChangeComplete }\n                  //   https://casesandberg.github.io/react-color/\n                  colors={ colorNamesList }\n                />\n              </Col>\n            </Row>\n          </Form.Group> */}\n          <Button variant=\"primary\" onClick={ this.handleSave } >\n              Save\n          </Button>\n        </Form>\n      </>\n    );\n  }\n}\nexport default LabelForm;","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faTag\n} from '@fortawesome/free-solid-svg-icons';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport LabelForm from './LabelForm.js';\n\nclass LabelModal extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      show: false,\n      color: this.props.color,\n      label: this.props.label,\n      description:  this.props.description,\n      labelId: this.props.labelId\n    };\n  }\n\n  handleClose = () => {\n    this.setState({\n      show: false,\n      // color: randomColor(),\n      // label: '',\n      // description: ''\n    });\n    // Clear all input fields in form?\n  }\n\n  handleShow = () => {\n    this.setState({ show: true });\n  }\n\n  render() {\n    return (\n      <>\n      \n        <Button variant=\"link\" onClick={ this.handleShow } block>{this.props.openBtn}</Button>\n        <Modal show={ this.state.show } onHide={ this.handleClose }>\n          <Modal.Header closeButton>\n            <Modal.Title><FontAwesomeIcon icon={ faTag } />  Label </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <LabelForm\n              onLabelSaved={ this.props.onLabelSaved }\n              label={ this.props.label }\n              description={ this.props.description }\n              color={ this.props.color }\n              labelId={ this.props.labelId }\n              handleClose={ this.handleClose }\n            />\n          </Modal.Body>\n        </Modal>\n      </>\n    );\n  }\n}\nexport default LabelModal;","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faTag,\n  faTags,\n  faTimes,\n  faPen,\n  faCog\n} from '@fortawesome/free-solid-svg-icons';\n\nimport LabelModal from './LabelModal.js';\nimport { randomColor } from './css-color-names.js';\n\nclass LabelsList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // isLabelsListOpen: false,\n      isLabelmodalShown: false\n    };\n  }\n\n  removeLabel = (id, e) => {\n    // eslint-disable-next-line no-restricted-globals\n    const response = confirm('Click OK to delete the label, Cancel if you changed your mind');\n    if (response === true) {\n      this.props.onLabelDelete(id);\n    } else {\n      alert('Your label was not deleted');\n    }\n  }\n\n  // TODO: See if CreateNewLabelModal can be refactored to accomodate for edit label\n  // if not then separate model to achieve same\n  // https://stackoverflow.com/questions/43335452/pass-item-data-to-a-react-modal\n  editLabel = (id, e) => {\n    const labelToEdit = this.props.labelsOptions.filter((label) => {\n      return label.id === id;\n    });\n    // this.props.onLabelsUpdate(newLabelsOptions);\n    console.log('labelToEdit', labelToEdit);\n    // alert('this functionality has not been implemented yet');\n  }\n  onLabelSaved = (newLabel) => {\n    // if updated - labelId is diff from null\n    if (newLabel.id) {\n      this.props.onLabelUpdate(newLabel);\n    }\n    // if created\n    else {\n      this.props.onLabelCreate(newLabel);\n    }\n  }\n\n  showLabelModal = () => {\n    console.log(this.state.isLabelmodalShown);\n    this.setState((state) => {\n      return {\n        isLabelmodalShown: !state.isLabelmodalShown\n      };\n    });\n  }\n\n  render() {\n    // TODO: add CSS to label and description to constrain width?\n    // move edit and X to the rigth\n    let labelsListOptions;\n    // Handle edge case if there's no labels\n    if (this.props.labelsOptions) {\n\n      labelsListOptions = this.props.labelsOptions.map((label, index) => {\n        return (<ListGroup.Item style={ { width: '100%' } } key={ 'label_' + index }>\n          <Row>\n            {/* Col space for the label color */}\n            <Col xs={ 1 } sm={ 1 } md={ 1 } lg={ 1 } xl={ 1 }\n              style={ { backgroundColor: label.color } }\n              title={ label.label }\n            >\n            </Col>\n            <Col xs={ 6 } sm={ 6 } md={ 6 } lg={ 6 } xl={ 6 }\n            // className=\"text-truncate\"\n              title={ label.label }\n            >\n              {label.label}\n            </Col>\n\n            <Col xs={ 1 } sm={2 } md={2 } lg={2 } xl={2 }>\n              {/* Edit label */}\n\n              {label.label.toLowerCase() !== 'default' ?\n                <LabelModal\n                  color={ label.color }\n                  label={ label.label }\n                  description={ label.description }\n                  labelId={ label.id }\n                  show={ this.state.isLabelmodalShown }\n                  onLabelSaved={ this.onLabelSaved }\n                  openBtn={ <span><FontAwesomeIcon icon={ faPen } /></span> }\n                /> : <Button title={ 'edit label' } variant=\"link\" size=\"sm\" disabled>\n                  <FontAwesomeIcon icon={ faPen } /></Button> }\n            </Col>\n            <Col xs={ 1 } sm={2 } md={ 2 } lg={ 2 } xl={ 2 }>\n              <Button title={ 'delete label' } variant=\"link\" size=\"sm\"\n                onClick={ (e) => {this.removeLabel(label.id, e);} }\n                disabled={ label.label.toLowerCase() === 'default' ? true : false }>\n                <FontAwesomeIcon icon={ faTimes } />\n              </Button>\n            </Col>\n\n          </Row>\n          <Row>\n            {/* Spacing to align title and color */}\n            <Col xs={ 1 } sm={ 1 } md={ 1 } lg={ 1 } xl={ 1 }\n              className=\"text-truncate\"\n              title={ label.label }>\n            </Col>\n            <Col xs={ 10 } sm={ 10 } md={ 10 } lg={ 10 } xl={ 10 }>\n              <Form.Text\n                // className={ [ 'text-muted', 'text-truncate' ].join(' ') }\n                title={ label.description }>\n                {label.description}\n              </Form.Text>\n            </Col>\n          </Row>\n        </ListGroup.Item>);\n      });\n    }\n\n    const labelsList = (<ListGroup style={ { height: '50vh', width: '20vw', overflowY: 'scroll', overflowX: 'hidden' } }>{labelsListOptions}\n    </ListGroup>);\n    // const labelsList = labelsListOptions;\n\n    return (<>\n\n      {this.props.isLabelsListOpen ? <>\n        {/* <br/> */}\n        <div>\n          <Card.Body>\n            <FontAwesomeIcon icon={ faTags } /> <FontAwesomeIcon icon={ faCog } /> Labels\n          </Card.Body>\n          { labelsList }\n          <Card.Body className=\"text-muted\">\n            <LabelModal\n              color={ randomColor() }\n              label={ '' }\n              description={ '' }\n              labelId={ null }\n              show={ this.state.isLabelmodalShown }\n              onLabelSaved={ this.onLabelSaved }\n              openBtn={ <><FontAwesomeIcon icon={ faTag } /> Create New Label</> }\n            />\n          </Card.Body>\n        </div>\n      </> : ''}\n\n    </>\n    );\n  }\n}\n\nexport default LabelsList;","/**\n * custom \"debounce\" function\n * only calls the last time a function is invoked within a time interval.\n * Example use cases, are when triggering an event listener on an input field\n * such as for a search\n * @param {function} cb - is the function you want to invoke only once\n * @param {number} duration - is in milliseconds\n * @return after time interval it invokes cb\n */\nconst onlyCallOnce = (cb, duration) => {\n  let timer;\n\n  return function() {\n    const args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(function() {\n      cb.apply(null, args);\n    }, duration);\n  };\n};\n\nexport default onlyCallOnce;","/**\n * Gets the start and end time for a range of words elements selected by a user on the page\n * https://github.com/OpenNewsLabs/autoEdit_2/blob/master/lib/app/views/transcription_view.js#L47\n *\n * TODO: check in chrome, firefox, and safari?\n */\n\n/**\n * TODO: at the moment only works for selections within a paragraph\n * @param {*} e - browser event\n * @returns - an object with start and end time - eg {stat: \"23.03\", end: \"39.61\"}\n */\nfunction getTimeFromUserWordsSelection(e) {\n  // https://stackoverflow.com/questions/11300590/how-to-captured-selected-text-range-in-ios-after-text-selection-expansion\n  // https://jsfiddle.net/JasonMore/gWZfb/\n  if (!window.getSelection().isCollapsed) {\n    const selectedRange = window.getSelection().getRangeAt(0).cloneContents();\n\n    // Seems like this work no matter if the selection is made left to right\n    // or right to left form the user\n    const words = selectedRange.querySelectorAll('.words');\n    if (words.length !== 0) {\n\n      return {\n        start: parseFloat(words[0].dataset.start),\n        end: parseFloat(words[words.length - 1].dataset.end)\n      };\n    }\n    else {\n      // handles selection of single word\n      // if selected a single word - then selection is on text element\n      // and we want to get to parent element, span with words class\n      const word = window.getSelection().anchorNode.parentElement;\n      if (word.className === 'words') {\n        return {\n          start: parseFloat(word.dataset.start),\n          end: parseFloat(word.dataset.end)\n        };\n      }\n\n      return false;\n    }\n  }\n\n  return false;\n}\n\nexport default getTimeFromUserWordsSelection;","/**\n * Makes list of unique speakers\n * from transcript.paragraphs list\n * to be used in react-select component\n *\n * TODO: decide if to move server side, and return unique list of speaker to client\n * Or if to move to separate file as util, perhaps generalise as reusable funciton?\n *\n * https://codeburst.io/javascript-array-distinct-5edc93501dc4\n */\nfunction makeListOfUniqueSpeakers(array) {\n    const result = [];\n    const map = new Map();\n    for (const item of array) {\n      if (!map.has(item.speaker)) {\n        map.set(item.speaker, true); // set any value to Map\n        result.push({\n          value: item.speaker,\n          label: item.speaker\n        });\n      }\n    }\n  \n    return result;\n  }\n\n  export default makeListOfUniqueSpeakers;","/* eslint-disable no-undef */\nimport React, { Component, Suspense } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHighlighter, faCog } from '@fortawesome/free-solid-svg-icons';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport SearchBar from './SearchBar/index.js';\nimport LabelsList from './LabelsList/index.js';\nimport onlyCallOnce from '../../../../Util/only-call-once/index.js';\nimport getTimeFromUserWordsSelection from './get-user-selection.js';\nimport ApiWrapper from '../../../../ApiWrapper/index.js';\nimport makeListOfUniqueSpeakers from './makeListOfUniqueSpeakers.js';\nconst Paragraphs = React.lazy(() => import('./Paragraphs/index.js'));\n\nclass Transcript extends Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n    this.state = {\n      // isVideoTranscriptPreviewShow: false,\n      searchString: '',\n      showParagraphsMatchingSearch: false,\n      selectedOptionLabelSearch: false,\n      selectedOptionSpeakerSearch: [],\n      sentenceToSearchCSS: '',\n      sentenceToSearchCSSInHighlights: '',\n      annotations: [],\n      isLabelsListOpen: true,\n      labelsOptions: this.props.labelsOptions,\n      currentTime: 0,\n      componentMounted: false,\n    };\n  }\n\n  componentDidMount = () => {\n    ApiWrapper.getAllAnnotations(this.props.projectId, this.props.transcriptId).then(json => {\n      // console.log(' ApiWrapper.getAllAnnotations', json);\n      this.setState({\n        annotations: json.annotations,\n        // componentMounted: true\n      });\n    });\n  };\n\n  handleLoadTranscription = () => {\n    this.setState({\n      componentMounted: true,\n    });\n  };\n\n  onLabelCreate = newLabel => {\n    ApiWrapper.createLabel(this.props.projectId, newLabel)\n      // TODO: add error handling\n      .then(json => {\n        this.setState({\n          labelsOptions: json.labels,\n        });\n      });\n  };\n\n  onLabelUpdate = updatedLabel => {\n    console.log('updatedLabel', updatedLabel);\n    // TODO: PUT with API Wrapper\n    ApiWrapper.updateLabel(this.props.projectId, updatedLabel.id, updatedLabel)\n      // TODO: add error handling\n      .then(json => {\n        this.setState({\n          labelsOptions: json.labels,\n        });\n      });\n  };\n\n  onLabelDelete = labelIid => {\n    ApiWrapper.deleteLabel(this.props.projectId, labelIid)\n      // TODO: add error handling\n      .then(json => {\n        this.setState({\n          labelsOptions: json.labels,\n        });\n      });\n  };\n\n  // functions repeadrted from TranscriptAnnotate/index.js\n  handleTimecodeClick = e => {\n    if (e.target.classList.contains('timecode')) {\n      const wordEl = e.target;\n      this.videoRef.current.currentTime = wordEl.dataset.start;\n      this.videoRef.current.play();\n    }\n  };\n\n  handleWordClick = e => {\n    if (e.target.className === 'words') {\n      const wordEl = e.target;\n      this.videoRef.current.currentTime = wordEl.dataset.start;\n      this.videoRef.current.play();\n    }\n  };\n\n  handleShowParagraphsMatchingSearch = isShowParagraphsMatchingSearch => {\n    this.setState({ showParagraphsMatchingSearch: isShowParagraphsMatchingSearch });\n  };\n\n  handleLabelsSearchChange = selectedOptionLabelSearch => {\n    this.setState({\n      selectedOptionLabelSearch,\n    });\n  };\n\n  handleSpeakersSearchChange = selectedOptionSpeakerSearch => {\n    this.setState({\n      selectedOptionSpeakerSearch,\n    });\n  };\n\n  handleSearch = (e, searchPreferences) => {\n    // TODO: debounce to optimise\n    if (e.target.value !== '') {\n      const searchString = e.target.value;\n      this.setState({ searchString: searchString.toLowerCase() });\n      //  \"debounce\" to optimise\n      onlyCallOnce(this.highlightWords(searchString), 500);\n    }\n    // if empty string reset\n    else if (e.target.value === '') {\n      this.setState({\n        sentenceToSearchCSS: '',\n        searchString: '',\n      });\n    }\n  };\n\n  highlightWords = searchString => {\n    const listOfSearchWords = searchString\n      .toLowerCase()\n      .trim()\n      .split(' ');\n    const pCSS = `.paragraph[data-paragraph-text*=\"${listOfSearchWords.join(' ')}\"]`;\n\n    const wordsToSearchCSS = listOfSearchWords.map((searchWord, index) => {\n      let res = `${pCSS} > div > span.words[data-text=\"${searchWord.toLowerCase().trim()}\"]`;\n      if (index < listOfSearchWords.length - 1) {\n        res += ', ';\n      }\n\n      return res;\n    });\n    // Need to add an extra span to search annotation hilights\n    // TODO: refactor to make more DRY\n    const wordsToSearchCSSInHighlights = listOfSearchWords.map((searchWord, index) => {\n      let res = `${pCSS} > div  > span >span.words[data-text=\"${searchWord.toLowerCase().trim()}\"]`;\n      if (index < listOfSearchWords.length - 1) {\n        res += ', ';\n      }\n\n      return res;\n    });\n    this.setState({\n      sentenceToSearchCSS: wordsToSearchCSS.join(' '),\n      sentenceToSearchCSSInHighlights: wordsToSearchCSSInHighlights.join(' '),\n    });\n  };\n\n  handleCreateAnnotation = e => {\n    const element = e.target;\n    // window.element = element;\n    const selection = getTimeFromUserWordsSelection();\n    if (selection) {\n      const { annotations } = this.state;\n      selection.labelId = element.dataset.labelId;\n      selection.note = '';\n      const newAnnotation = selection;\n      console.log('newAnnotation', newAnnotation);\n      ApiWrapper.createAnnotation(this.props.projectId, this.props.transcriptId, newAnnotation).then(json => {\n        const newAnnotationFromServer = json.annotation;\n        console.log('newAnnotationFromServer', newAnnotationFromServer);\n        // console.log('handleCreateAnnotation', newAnnotation);\n        // this.setState({\n        //   labelsOptions: json.labels\n        // });\n        const newAnnotationsSet = JSON.parse(JSON.stringify(annotations));\n        // newAnnotation.id = json.annotation.id;\n        // newAnnotationsList.push(newAnnotation);\n        newAnnotationsSet.push(newAnnotationFromServer);\n\n        this.setState({ annotations: newAnnotationsSet });\n      });\n    } else {\n      alert('Select some text in the transcript to highlight ');\n    }\n  };\n\n  handleDeleteAnnotation = annotationId => {\n    const { annotations } = this.state;\n    const newAnnotationsSet = annotations.filter(annotation => {\n      return annotation.id !== annotationId;\n    });\n\n    const deepCloneOfNestedObjectNewAnnotationsSet = JSON.parse(JSON.stringify(newAnnotationsSet));\n    ApiWrapper.deleteAnnotation(this.props.projectId, this.props.transcriptId, annotationId).then(json => {\n      this.setState({ annotations: deepCloneOfNestedObjectNewAnnotationsSet });\n    });\n  };\n\n  // TODO: add server side via ApiWrapper\n  // similar to handleDeleteAnnotation filter to find annotation then replace text\n  handleEditAnnotation = annotationId => {\n    const { annotations } = this.state;\n    const newAnnotationToEdit = annotations.find(annotation => {\n      return annotation.id === annotationId;\n    });\n    const newNote = prompt('Edit the text note of the annotation', newAnnotationToEdit.note);\n    if (newNote) {\n      newAnnotationToEdit.note = newNote;\n      ApiWrapper.updateAnnotation(this.state.projectId, this.props.transcriptId, annotationId, newAnnotationToEdit).then(json => {\n        const newAnnotation = json.annotation;\n        // updating annotations client side by removing updating one\n        // and re-adding to array\n        // could be refactored using `findindex`\n        const newAnnotationsSet = annotations.filter(annotation => {\n          return annotation.id !== annotationId;\n        });\n        newAnnotationsSet.push(newAnnotation);\n        this.setState({ annotations: newAnnotationsSet });\n      });\n    } else {\n      alert('all good nothing changed');\n    }\n  };\n\n  getCurrentWordTime = () => {\n    const { words } = this.props.transcript;\n\n    const currentTime = this.state.currentTime;\n    // if (this.videoRef && this.videoRef.current && this.videoRef.current.currentTime) {\n    //   currentTime = this.videoRef.current.currentTime;\n    // }\n    const currentWordTime = words.find(word => {\n      if (currentTime >= word.start && currentTime <= word.end) {\n        return word.start;\n      }\n      return null;\n    });\n    if (currentWordTime !== undefined) {\n      return currentWordTime[0];\n    }\n\n    return 0;\n  };\n  // eslint-disable-next-line class-methods-use-this\n  render() {\n    const currentWordTime = this.state.currentTime;\n    const unplayedColor = 'grey';\n\n    // Time to the nearest half second\n    const time = Math.round(currentWordTime * 4.0) / 4.0;\n    const highlights = (\n      <style scoped>\n        {`span.words[data-prev-times~=\"${Math.floor(time)}\"][data-transcript-id=\"${this.props.transcriptId}\"] { color: ${unplayedColor} }`}\n      </style>\n    );\n    return (\n      <>\n        <style scoped>\n          {/* This is to style of the Paragraph component programmatically */}\n          {`${this.state.sentenceToSearchCSS} { background-color: ${'yellow'}; text-shadow: 0 0 0.01px black }`}\n          {`${this.state.sentenceToSearchCSSInHighlights} { background-color: ${'yellow'}; text-shadow: 0 0 0.01px black }`}\n        </style>\n        <Card\n          style={\n            {\n              // backgroundColor: '#eee',\n              // boxShadow: '0 0 10px #ccc'\n            }\n          }\n        >\n          <Card.Body style={{ backgroundColor: 'black', padding: '0px' }}>\n            {this.state.componentMounted && (\n              <video\n                src={this.props.url}\n                ref={this.videoRef}\n                onTimeUpdate={e => {\n                  this.setState({ currentTime: e.target.currentTime });\n                }}\n                style={{\n                  width: '100%',\n                  height: '10em',\n                  marginTop: '0em',\n                  backgroundColor: 'black',\n                  boxShadow: 'none',\n                }}\n                controls\n                playsInline\n              />\n            )}\n          </Card.Body>\n          {/* <Card.Body> */}\n          <Card.Body style={{ paddingBottom: '0.5em', paddingTop: '0.5em' }}>\n            <Row>\n              <Col xs={12} sm={12} md={12} lg={12} xl={12}>\n                <ButtonGroup style={{ width: '100%' }}>\n                  <Dropdown as={ButtonGroup} style={{ width: '100%' }}>\n                    <Button variant=\"light\" data-label-id={'default'} onClick={this.handleCreateAnnotation}>\n                      <FontAwesomeIcon icon={faHighlighter} flip=\"horizontal\" /> Highlight\n                      {/* */}\n                    </Button>\n                    <Dropdown.Toggle split variant=\"light\" data-lable-id={0} />\n                    <Dropdown.Menu onClick={this.handleCreateAnnotation}>\n                      {this.state.labelsOptions &&\n                        this.state.labelsOptions.map(label => {\n                          return (\n                            <Dropdown.Item key={`label_id_${label.id}`} data-label-id={label.id}>\n                              <Row data-label-id={label.id}>\n                                <Col xs={1} sm={1} md={1} lg={1} xl={1} style={{ backgroundColor: label.color }} data-label-id={label.id}></Col>\n                                <Col xs={1} sm={1} md={1} lg={1} xl={1} data-label-id={label.id}>\n                                  {label.label}\n                                </Col>\n                              </Row>\n                            </Dropdown.Item>\n                          );\n                        })}\n                    </Dropdown.Menu>\n                  </Dropdown>\n                  <DropdownButton drop={'right'} as={ButtonGroup} title={<FontAwesomeIcon icon={faCog} />} id=\"bg-nested-dropdown\" variant=\"light\">\n                    <LabelsList\n                      isLabelsListOpen={this.state.isLabelsListOpen}\n                      labelsOptions={this.state.labelsOptions && this.state.labelsOptions}\n                      onLabelUpdate={this.onLabelUpdate}\n                      onLabelCreate={this.onLabelCreate}\n                      onLabelDelete={this.onLabelDelete}\n                    />\n                  </DropdownButton>\n                </ButtonGroup>\n              </Col>\n            </Row>\n          </Card.Body>\n          <Card.Body style={{ paddingBottom: '0px', paddingTop: '0px' }}>\n            <SearchBar\n              labelsOptions={this.state.labelsOptions}\n              speakersOptions={this.props.transcript ? makeListOfUniqueSpeakers(this.props.transcript.paragraphs) : null}\n              handleSearch={this.handleSearch}\n              handleLabelsSearchChange={this.handleLabelsSearchChange}\n              handleSpeakersSearchChange={this.handleSpeakersSearchChange}\n              handleShowParagraphsMatchingSearch={this.handleShowParagraphsMatchingSearch}\n            />\n          </Card.Body>\n          <hr style={{ margin: '0px' }} />\n          <Card.Body\n            onDoubleClick={this.handleWordClick}\n            onClick={this.handleTimecodeClick}\n            style={{\n              height: '62.5vh',\n              overflow: 'scroll',\n              // backgroundColor: '#f9f9f9'\n            }}\n          >\n            {highlights}\n\n            {this.props.transcript && !this.state.componentMounted && (\n              <Button size=\"lg\" variant=\"light\" onClick={this.handleLoadTranscription} block disabled={this.props.status === 'done' ? false : true}>\n                Load transcription\n              </Button>\n            )}\n\n            <Suspense\n              fallback={\n                <>\n                  <Skeleton variant=\"text\" />\n                  <Skeleton variant=\"text\" />\n                  <Skeleton variant=\"text\" />\n                  <Skeleton variant=\"text\" />\n                  <Skeleton variant=\"text\" />\n                  <Skeleton variant=\"text\" />\n                  <Skeleton variant=\"text\" />\n                  <Skeleton variant=\"text\" />\n                  <Skeleton variant=\"text\" />\n                  <Skeleton variant=\"text\" />\n                </>\n              }\n            >\n              {this.props.transcript && this.state.componentMounted && (\n                <Paragraphs\n                  labelsOptions={this.state.labelsOptions && this.state.labelsOptions}\n                  annotations={this.state.annotations ? this.state.annotations : []}\n                  transcriptJson={this.props.transcript}\n                  searchString={this.state.searchString ? this.state.searchString : ''}\n                  showParagraphsMatchingSearch={this.state.showParagraphsMatchingSearch}\n                  selectedOptionLabelSearch={this.state.selectedOptionLabelSearch ? this.state.selectedOptionLabelSearch : []}\n                  selectedOptionSpeakerSearch={this.state.selectedOptionSpeakerSearch ? this.state.selectedOptionSpeakerSearch : []}\n                  transcriptId={this.props.transcriptId}\n                  handleTimecodeClick={this.handleTimecodeClick}\n                  handleWordClick={this.handleWordClick}\n                  handleDeleteAnnotation={this.handleDeleteAnnotation}\n                  handleEditAnnotation={this.handleEditAnnotation}\n                />\n              )}\n            </Suspense>\n          </Card.Body>\n        </Card>\n      </>\n    );\n  }\n}\n\nexport default Transcript;\n","// helper function for adding custom stylings to speakers in react-select component in search bar\n// https://react-select.com/styles\n\nconst speakersColorStyles = {\n  control: styles => ({ ...styles, backgroundColor: 'white' }),\n  option: (styles) => {\n\n    const tmpBackgroundColor = null;\n\n    return {\n      ...styles,\n      backgroundColor: tmpBackgroundColor,\n      cursor:'default'\n    };\n  },\n\n  multiValue: (styles) => {\n\n    return {\n      ...styles,\n      backgroundColor: 'white',\n      border: '0.05em solid grey'\n    };\n  },\n  multiValueLabel: (styles) => ({\n    ...styles\n  }),\n  multiValueRemove: (styles) => ({\n    ...styles\n  })\n};\n\nexport default speakersColorStyles;\n","import React, { Component } from 'react';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Select from 'react-select';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faAngleLeft,\n  faTag,\n  faUser,\n  faSearch,\n  faFileAlt\n} from '@fortawesome/free-solid-svg-icons';\nimport colourStyles from '../LabelsList/select-color-styles.js';\nimport speakersColorStyles from './select-speakers-color-styles.js';\n\nclass SearchBarTranscripts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isShowingFilterOptions: false,\n      showParagraphsMatchingSearch: false,\n      showTextSearchPreferences: false,\n      showSpeakersSearchPreferences: false,\n      showLabelsSearchPreferences: false,\n      selectedOptionTranscriptSearch: false\n    };\n  }\n\n  handleSpeakersSearchChange = selectedOptionSpeakerSearch => {\n    this.props.handleSpeakersSearchChange(selectedOptionSpeakerSearch);\n  };\n\n   handleLabelsSearchChange = selectedOptionLabelSearch => {\n     this.props.handleLabelsSearchChange(selectedOptionLabelSearch);\n   };\n\n   handleShowParagraphsMatchingSearch = () => {\n     this.setState((state) => {\n      this.props.handleShowParagraphsMatchingSearch( !state.showParagraphsMatchingSearch);\n       return { showParagraphsMatchingSearch: !state.showParagraphsMatchingSearch };\n     }, () => {\n      \n     });\n   }\n\n   handleTranscriptSearchChange = selectedOptionTranscriptSearch => {\n    this.props.handleTranscriptSearchChange(selectedOptionTranscriptSearch);\n    this.setState({ selectedOptionTranscriptSearch });\n  };\n\n   /* TODO: move SearchBarTranscripts to a Search Toolbar component? */\n   render() {\n\n     return (\n       <>\n              <Row className=\"mb-3\">\n                 <Col xs={ 1 } sm={ 1 } md={ 1 } ld={ 1 } xl={ 1 }>\n                 <Button \n                  // block\n                  variant=\"light\"\n                  onClick={this.props.handleShowAdvancedSearchViewSearchingAcrossTranscripts}\n                  title={\"close search across transcript in a project\"}\n                >\n                  <FontAwesomeIcon \n                   icon={ faAngleLeft }\n                  />\n                </Button>\n                 </Col>\n                 <Col xs={ 10 } sm={ 11 } md={ 11 } ld={ 11 } xl={ 11 }>\n                 <InputGroup >\n                    {/* Search */}\n                    <FormControl\n                      //  TODO: pass labels, speakers, and paragraph pref\n                      onChange={ (e) => { this.props.handleSearch(e, {\n                        showParagraphsMatchingSearch: this.state.showParagraphsMatchingSearch,\n                        showLabelsSearchPreferences: this.state.showLabelsSearchPreferences,\n                        showSpeakersSearchPreferences: this.state.showSpeakersSearchPreferences,\n                        selectedOptionTranscriptSearch: this.state.selectedOptionTranscriptSearch\n                      });} }\n                      value={ this.props.searchValue }\n                      placeholder=\"Search text...\"\n                      aria-label=\"search\"\n                      aria-describedby=\"search\"\n                    />\n                    <InputGroup.Append>\n                      <InputGroup.Text>\n                        <FontAwesomeIcon icon={ faSearch } />\n                      </InputGroup.Text>\n                    </InputGroup.Append>\n                </InputGroup>\n                {/* <Form.Text className=\"text-muted\">\n                Search Text within a transcript \n              </Form.Text> */}\n                </Col>\n               </Row>\n               <Row className=\"mb-3\">\n                 <Col xs={ 1 } sm={ 1 } md={ 1 } ld={ 1 } xl={ 1 }>\n                   <InputGroup.Prepend>\n                     <InputGroup.Text>\n                       <FontAwesomeIcon icon={ faFileAlt } />\n                     </InputGroup.Text>\n                   </InputGroup.Prepend>\n                 </Col>\n                 <Col xs={ 10 } sm={ 11 } md={ 11 } ld={ 11 } xl={ 11 }>\n                   <Select\n                     value={ this.state.selectedOptionTranscriptSearch }\n                     onChange={ this.handleTranscriptSearchChange }\n                     isMulti\n                     isSearchable\n                     options={ this.props.transcriptOptions }\n                     styles={ speakersColorStyles }\n                     placeholder={ 'Filter by transcripts...' }\n                   />\n                {/* <Form.Text className=\"text-muted\">\n                Filter by transcripts in the current project\n                </Form.Text> */}\n                 </Col>\n               </Row>\n               <Row className=\"mb-3\">\n                 <Col xs={ 1 } sm={ 1 } md={ 1 } ld={ 1 } xl={ 1 }>\n                   <InputGroup.Prepend>\n                     <InputGroup.Text>\n                       <FontAwesomeIcon icon={ faUser } />\n                     </InputGroup.Text>\n                   </InputGroup.Prepend>\n                 </Col>\n                 <Col xs={ 10 } sm={ 11 } md={ 11 } ld={ 11 } xl={ 11 }>\n                   <Select\n                     value={ this.state.selectedOptionSpeakerSearch }\n                     onChange={ this.handleSpeakersSearchChange }\n                     isMulti\n                     isSearchable\n                     options={ this.props.speakersOptions }\n                     styles={ speakersColorStyles }\n                     placeholder={ 'Filter by speakers...' }\n                   />\n                {/* <Form.Text className=\"text-muted\">\n                  Filter by speaker in the current project\n                </Form.Text> */}\n                 </Col>\n               </Row>\n               <Row className=\"mb-3\">\n                 <Col xs={ 1 } sm={ 1 } md={ 1 } ld={ 1 } xl={ 1 }>\n                   <InputGroup.Prepend>\n                     <InputGroup.Text>\n                       <FontAwesomeIcon icon={ faTag } />\n                     </InputGroup.Text>\n                   </InputGroup.Prepend>\n                 </Col>\n                 <Col xs={ 10 } sm={ 11 } md={ 11 } ld={ 11 } xl={ 11 }>\n                   <Select\n                     value={ this.state.selectedOptionLabelSearch }\n                     onChange={ this.handleLabelsSearchChange }\n                     isMulti\n                     isSearchable\n                     options={ this.props.labelsOptions }\n                     styles={ colourStyles }\n                     placeholder={ 'Filter by labels...' }\n                   />\n                {/* <Form.Text className=\"text-muted\">\n                  Filter by labels in the current project\n                </Form.Text> */}\n                 </Col>\n               </Row>\n       </>\n     );\n   }\n}\n\nexport default SearchBarTranscripts;","import React, { Component } from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Nav from 'react-bootstrap/Nav';\nimport Tab from 'react-bootstrap/Tab';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClock, faExclamationTriangle, faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport Transcript from './Transcript.js';\nimport SearchBarTranscripts from './SearchBarTranscripts/index.js';\nimport onlyCallOnce from '../../../../Util/only-call-once/index.js';\nimport makeListOfUniqueSpeakers from './makeListOfUniqueSpeakers.js';\nimport Paragraphs from './Paragraphs/index.js';\n\nclass Transcripts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchString: '',\n      sentenceToSearchCSS: '',\n      sentenceToSearchCSSInHighlights: '',\n      selectedOptionLabelSearch: [],\n      selectedOptionSpeakerSearch: [],\n      selectedOptionTranscriptsSearch: [],\n      showParagraphsMatchingSearch: false,\n      showAdvancedSearchViewSearchingAcrossTranscripts: false,\n    };\n  }\n\n  // New\n  handleSearch = (e, searchPreferences) => {\n    console.log('Transcripts:: SEARCH:::', e.target.value, searchPreferences);\n    // TODO: debounce to optimise\n    if (e.target.value !== '') {\n      const searchString = e.target.value;\n      this.setState({ searchString: searchString.toLowerCase() });\n      //  \"debounce\" to optimise\n      // TODO: re introduce this\n      onlyCallOnce(this.highlightWords(searchString), 500);\n    }\n    // if empty string reset\n    else if (e.target.value === '') {\n      this.setState({\n        sentenceToSearchCSS: '',\n        searchString: '',\n      });\n    }\n  };\n  highlightWords = searchString => {\n    const listOfSearchWords = searchString\n      .toLowerCase()\n      .trim()\n      .split(' ');\n    const pCSS = `.paragraph[data-paragraph-text*=\"${listOfSearchWords.join(' ')}\"]`;\n\n    const wordsToSearchCSS = listOfSearchWords.map((searchWord, index) => {\n      let res = `${pCSS} > div > span.words[data-text=\"${searchWord.toLowerCase().trim()}\"]`;\n      if (index < listOfSearchWords.length - 1) {\n        res += ', ';\n      }\n\n      return res;\n    });\n    // Need to add an extra span to search annotation hilights\n    // TODO: refactor to make more DRY\n    const wordsToSearchCSSInHighlights = listOfSearchWords.map((searchWord, index) => {\n      let res = `${pCSS} > div  > span >span.words[data-text=\"${searchWord.toLowerCase().trim()}\"]`;\n      if (index < listOfSearchWords.length - 1) {\n        res += ', ';\n      }\n\n      return res;\n    });\n    this.setState({\n      sentenceToSearchCSS: wordsToSearchCSS.join(' '),\n      sentenceToSearchCSSInHighlights: wordsToSearchCSSInHighlights.join(' '),\n    });\n  };\n\n  // To search across all transcripts\n  handleLabelsSearchChange = selectedOptionLabelSearch => {\n    this.setState({\n      selectedOptionLabelSearch,\n    });\n  };\n  // To search across all transcripts\n  handleSpeakersSearchChange = selectedOptionSpeakerSearch => {\n    this.setState({\n      selectedOptionSpeakerSearch,\n    });\n  };\n  // To search across all transcripts\n  handleTranscriptSearchChange = selectedOptionTranscriptsSearch => {\n    this.setState({\n      selectedOptionTranscriptsSearch,\n    });\n  };\n  // To search across all transcripts\n  handleShowParagraphsMatchingSearch = isShowParagraphsMatchingSearch => {\n    this.setState({ showParagraphsMatchingSearch: isShowParagraphsMatchingSearch });\n  };\n\n  // TODO: Not yet implemented - low priority\n  handleWordClick = e => {\n    if (e.target.className === 'words') {\n      const wordEl = e.target;\n      console.log('wordEl', wordEl);\n      // this.videoRef.current.currentTime = wordEl.dataset.start;\n      // this.videoRef.current.play();\n    }\n  };\n\n  handleFilterResults = () => {\n    console.log('handleFilterResults');\n    this.setState({\n      searchString: '',\n      sentenceToSearchCSS: '',\n      sentenceToSearchCSSInHighlights: '',\n      selectedOptionLabelSearch: [],\n      selectedOptionSpeakerSearch: [],\n      selectedOptionTranscriptsSearch: [],\n    });\n  };\n\n  handleShowAdvancedSearchViewSearchingAcrossTranscripts = () => {\n    this.setState(prevState => {\n      if (!prevState.showAdvancedSearchViewSearchingAcrossTranscripts) {\n        return {\n          showAdvancedSearchViewSearchingAcrossTranscripts: true,\n          // in this advanced search view - when searchign across paragraphs always show paragraphs matching searches\n          // which means segmenting transcript to show only paragraphs that metch serching criteria\n          showParagraphsMatchingSearch: true,\n        };\n      } else {\n        return {\n          showAdvancedSearchViewSearchingAcrossTranscripts: false,\n          // in this advanced search view - when searchign across paragraphs always show paragraphs matching searches\n          // which means segmenting transcript to show only paragraphs that metch serching criteria\n          showParagraphsMatchingSearch: false,\n          // reset search if closing view\n          selectedOptionLabelSearch: [],\n          selectedOptionSpeakerSearch: [],\n          selectedOptionTranscriptsSearch: [],\n        };\n      }\n    });\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  render() {\n    const transcriptsElNav = this.props.transcripts.map((transcript, index) => {\n      // Note: that if there are transcripts in progress, current setup\n      // won't show when they are done in this view\n      // only in project's view list of transcript you get a UI update when they are done\n      return (\n        <Nav.Item key={transcript.id}>\n          <Nav.Link disabled={transcript.status !== 'done' ? true : false} eventKey={transcript.id}>\n            {transcript.status === 'in-progress' ? <FontAwesomeIcon icon={faClock} /> : ''}\n            {(transcript.status !== 'done' && transcript.status !== 'in-progress') || transcript.status === 'error' ? (\n              <FontAwesomeIcon icon={faExclamationTriangle} />\n            ) : (\n              ''\n            )}\n            {`  ${transcript.transcriptTitle}`}\n          </Nav.Link>\n        </Nav.Item>\n      );\n    });\n    // id - value - label - color - description\n    // const transcriptOptions = [{value: 'test', label: 'test'}];\n    const transcriptsOptions = this.props.transcripts\n      .map(transcript => {\n        if (transcript.id && transcript.transcriptTitle) {\n          return {\n            id: transcript.id,\n            value: transcript.id,\n            label: transcript.transcriptTitle,\n            description: transcript.description,\n            status: transcript.status,\n          };\n        } else {\n          return {\n            status: transcript.status,\n          };\n        }\n      }) // Filter to show only transcripts that are done. excluding in progress and errored\n      .filter(transcript => {\n        return transcript.status === 'done';\n      });\n\n    const transcriptsUniqueListOfSpeakers2D = this.props.transcripts.map(transcript => {\n      if (transcript.transcript && transcript.transcript.paragraphs) {\n        return makeListOfUniqueSpeakers(transcript.transcript.paragraphs);\n      } else {\n        return { value: 'test', label: 'test' };\n      }\n    });\n    const transcriptsUniqueListOfSpeakers = transcriptsUniqueListOfSpeakers2D.reduce(function(prev, curr) {\n      return prev.concat(curr);\n    });\n    // remove duplicates\n    function removeDuplicates(array) {\n      //  https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript\n      return Array.from(new Set(array.map(JSON.stringify))).map(JSON.parse);\n    }\n    const transcriptsUniqueListOfSpeakersNoDuplicates = removeDuplicates(transcriptsUniqueListOfSpeakers);\n\n    /* TODO: Will this work? */\n    const searchBarTranscriptsElement = (\n      <SearchBarTranscripts\n        labelsOptions={this.props.labelsOptions}\n        speakersOptions={transcriptsUniqueListOfSpeakersNoDuplicates}\n        handleSearch={this.handleSearch}\n        searchValue={this.state.searchString}\n        handleLabelsSearchChange={this.handleLabelsSearchChange}\n        handleSpeakersSearchChange={this.handleSpeakersSearchChange}\n        handleShowParagraphsMatchingSearch={this.handleShowParagraphsMatchingSearch}\n        transcriptOptions={transcriptsOptions}\n        handleTranscriptSearchChange={this.handleTranscriptSearchChange}\n        handleFilterResults={this.handleFilterResults}\n        handleShowAdvancedSearchViewSearchingAcrossTranscripts={this.handleShowAdvancedSearchViewSearchingAcrossTranscripts}\n      />\n    );\n\n    const transcriptsElTab = this.props.transcripts.map(transcript => {\n      return (\n        <Tab.Pane key={transcript.id} eventKey={transcript.id}>\n          <Transcript\n            status={transcript.status}\n            projectId={this.props.projectId}\n            transcriptId={transcript.id}\n            labelsOptions={this.props.labelsOptions}\n            title={transcript.transcriptTitle}\n            transcript={transcript.transcript}\n            url={transcript.url}\n          />\n        </Tab.Pane>\n      );\n    });\n\n    const searchedParagraphsAcrossTranscripts = this.props.transcripts.map((transcript, index) => {\n      if (\n        transcript.transcript &&\n        this.state.selectedOptionTranscriptsSearch.find(t => {\n          return transcript.id === t.id;\n        })\n      ) {\n        return (\n          <Paragraphs\n            labelsOptions={this.props.labelsOptions}\n            annotations={transcript.annotations ? transcript.annotations : []}\n            transcriptJson={transcript.transcript}\n            searchString={this.state.searchString ? this.state.searchString : ''}\n            showParagraphsMatchingSearch={this.state.showParagraphsMatchingSearch}\n            selectedOptionLabelSearch={this.state.selectedOptionLabelSearch ? this.state.selectedOptionLabelSearch : []}\n            selectedOptionSpeakerSearch={this.state.selectedOptionSpeakerSearch ? this.state.selectedOptionSpeakerSearch : []}\n            transcriptId={transcript.id}\n            handleTimecodeClick={this.handleTimecodeClick}\n            // TODO: these attributes below have not been implemented - low priority\n            // handleWordClick={ ()=>{alert('not implemented in this view, switch to individual transcript')}}\n            handleWordClick={this.handleWordClick}\n            // handleDeleteAnnotation={ this.handleDeleteAnnotation }\n            handleDeleteAnnotation={() => {\n              alert('not implemented in this view, switch to individual transcript');\n            }}\n            // handleEditAnnotation={ this.handleEditAnnotation }\n            handleEditAnnotation={() => {\n              alert('not implemented in this view, switch to individual transcript');\n            }}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n\n    return (\n      <>\n        <style scoped>\n          {/* This is to style of the Paragraph component programmatically */}\n          {`${this.state.sentenceToSearchCSS} { background-color: ${'yellow'}; text-shadow: 0 0 0.01px black }`}\n          {`${this.state.sentenceToSearchCSSInHighlights} { background-color: ${'yellow'}; text-shadow: 0 0 0.01px black }`}\n        </style>\n        <Tab.Container defaultActiveKey={this.props.transcripts[0] ? this.props.transcripts[0].id : 'first'}>\n          <Row>\n            <Col sm={!this.state.showAdvancedSearchViewSearchingAcrossTranscripts ? 3 : 0}>\n              {!this.state.showAdvancedSearchViewSearchingAcrossTranscripts ? (\n                <>\n                  <Button\n                    onClick={this.handleShowAdvancedSearchViewSearchingAcrossTranscripts}\n                    variant={'light'}\n                    block\n                    title={'Search across transcripts in this project'}\n                    size={'sm'}\n                  >\n                    <FontAwesomeIcon icon={faSearch} /> Project's Transcripts\n                  </Button>\n                  <hr />\n\n                  <Nav variant=\"pills\" className=\"flex-column\">\n                    <div style={{ height: '97vh', overflow: 'scroll' }}>{transcriptsElNav}</div>\n                  </Nav>\n                </>\n              ) : null}\n            </Col>\n\n            <Col sm={!this.state.showAdvancedSearchViewSearchingAcrossTranscripts ? 9 : 12}>\n              <Tab.Content>\n                {this.state.showAdvancedSearchViewSearchingAcrossTranscripts ? (\n                  <>\n                    {' '}\n                    {searchBarTranscriptsElement}\n                    <section\n                      style={{\n                        height: '80vh',\n                        overflow: 'auto',\n                        border: 'solid',\n                        borderWidth: '0.01em',\n                        borderColor: 'lightgrey',\n                      }}\n                    >\n                      {searchedParagraphsAcrossTranscripts}\n                    </section>\n                  </>\n                ) : (\n                  <>{transcriptsElTab}</>\n                )}\n              </Tab.Content>\n            </Col>\n          </Row>\n        </Tab.Container>\n      </>\n    );\n  }\n}\n\nexport default Transcripts;\n","/**\n * TODO: remove this and export from react-transcript-editor digital-paper-edit STT import draftJs converter\n\n edge cases\n- more segments then words - not an issue if you start by matching words with segment\nand handle edge case where it doesn't find a match\n- more words then segments - orphan words\n*\n* Takes in list of words and list of paragraphs (paragraphs have speakers info associated with it)\n```js\n{\n  \"words\": [\n    {\n      \"id\": 0,\n      \"start\": 13.02,\n      \"end\": 13.17,\n      \"text\": \"There\"\n    },\n    {\n      \"id\": 1,\n      \"start\": 13.17,\n      \"end\": 13.38,\n      \"text\": \"is\"\n    },\n    ...\n    ],\n  \"paragraphs\": [\n    {\n      \"id\": 0,\n      \"start\": 13.02,\n      \"end\": 13.86,\n      \"speaker\": \"TBC 00\"\n    },\n    {\n      \"id\": 1,\n      \"start\": 13.86,\n      \"end\": 19.58,\n      \"speaker\": \"TBC 1\"\n    },\n    ...\n  ]\n}\n```\n*  and returns a list of words grouped into paragraphs, with words, text and speaker attribute\n```js\n[\n  {\n    \"words\": [\n      {\n        \"id\": 0,\n        \"start\": 13.02,\n        \"end\": 13.17,\n        \"text\": \"There\"\n      },\n      {\n        \"id\": 1,\n        \"start\": 13.17,\n        \"end\": 13.38,\n        \"text\": \"is\"\n      },\n      {\n        \"id\": 2,\n        \"start\": 13.38,\n        \"end\": 13.44,\n        \"text\": \"a\"\n      },\n      {\n        \"id\": 3,\n        \"start\": 13.44,\n        \"end\": 13.86,\n        \"text\": \"day.\"\n      }\n    ],\n    \"text\": \"There is a day.\",\n    \"speaker\": \"TBC 00\"\n  },\n  ...\n]\n```\n */\nfunction groupWordsInParagraphsBySpeakers(words, segments) {\n  const result = addWordsToSpeakersParagraphs(words, segments);\n\n  return result;\n}\n\nfunction addWordsToSpeakersParagraphs(words, segments) {\n  const results = [];\n  let currentSegmentIndex = 0;\n  let previousSegmentIndex = 0;\n  let paragraph = { words: [], text: '', speaker: '' };\n  words.forEach(word => {\n    const currentSegment = findSegmentForWord(word, segments);\n    // if a segment exists for the word\n    if (currentSegment !== undefined) {\n      currentSegmentIndex = segments.indexOf(currentSegment);\n      if (currentSegmentIndex === previousSegmentIndex) {\n        paragraph.words.push(word);\n        paragraph.text += word.text + ' ';\n        paragraph.speaker = currentSegment.speaker;\n      } else {\n        previousSegmentIndex = currentSegmentIndex;\n        paragraph.text.trim();\n        results.push(paragraph);\n        paragraph = { words: [], text: '', speaker: '' };\n        paragraph.words.push(word);\n        paragraph.text += word.text + ' ';\n        paragraph.speaker = currentSegment.speaker;\n      }\n    }\n  });\n  results.push(paragraph);\n\n  return results;\n}\n\n/**\n * Helper functions\n */\n\n/**\n * given word start and end time attributes\n * looks for segment range that contains that word\n * if it doesn't find any it returns a segment with `UKN`\n * speaker attributes.\n * @param {object} word - word object\n * @param {array} segments - list of segments objects\n * @return {object} - a single segment whose range contains the word\n */\nfunction findSegmentForWord(word, segments) {\n  const tmpSegment = segments.find(seg => {\n    if (word.start >= seg.start && word.end <= seg.end) {\n      return seg;\n    }\n    return null;\n  });\n\n  return tmpSegment;\n}\n\nexport default groupWordsInParagraphsBySpeakers;\n","/**\n *  Case 1 - there is an annotation within the boundaries of the current paragraph\n */\nconst isAnnotationWithinParagraph = ( annotations, paragraphFirstWordTime, paragraphLastWordTime) => {\n  const results = annotations.find(annotation => {\n    return (\n      annotation.start >= paragraphFirstWordTime &&\n      annotation.end <= paragraphLastWordTime\n    );\n  });\n\n  return results;\n};\n\n/**\n *  Case 2 - annotation start within the paragraph but ends in subsequent one\n * TODO:\n */\nconst isAnnotationStartWithinParagraph = ( annotations, paragraphFirstWordTime, paragraphLastWordTime) => {\n  const results = annotations.find(annotation => {\n    return (\n      annotation.start >= paragraphFirstWordTime &&\n      annotation.start <= paragraphLastWordTime\n    );\n  });\n\n  return results;\n};\n\n/**\n *  Case 3 - annotation ends within the paragraph  but starts in previous one\n *  TODO:\n */\nconst isAnnotationEndWithinParagraph = ( annotations, paragraphFirstWordTime, paragraphLastWordTime) => {\n  const results = annotations.find(annotation => {\n    return (\n      annotation.end >= paragraphFirstWordTime &&\n      annotation.end <= paragraphLastWordTime\n    );\n  });\n\n  return results;\n};\n\n/**\n *  Case 4 -annotation spans across the current paragraph  but starts in previous one and ends in subsequent one\n * TODO:\n */\nconst isAnnotationAcrossParagraph = ( annotations, paragraphFirstWordTime, paragraphLastWordTime) => {\n  const results = annotations.find(annotation => {\n    return (\n      annotation.start <= paragraphFirstWordTime &&\n      annotation.end >= paragraphLastWordTime\n    );\n  });\n\n  return results;\n};\n\n/**\n *\n * @param {array} annotations\n * @param {object} paragraph\n * @returns annotation object found in the paragraph - false if it doesn't contain\n * example annotation object\n ```\n  { 'id': 2,\n    'start':14.38,\n    'end': 18.14,\n    'labelId': 1,\n    'note': 'optional example text description for an annotation - TEST 1'\n  };\n```\n * TODO: This assumes the annotation is included in the paragraph, and doesn't span across multiple lines\n */\nconst findAnnotationInParagraph = (annotations, paragraph) => {\n  const paragraphFirstWordTime = paragraph[0].start;\n  const paragraphLastWordTime = paragraph[paragraph.length - 1].end;\n  // Case 1 - there is an annotation within the boundaries of the current paragraph\n  const resultsCaseOne = isAnnotationWithinParagraph(annotations, paragraphFirstWordTime, paragraphLastWordTime);\n  if (resultsCaseOne) {\n    return resultsCaseOne;\n  }\n  // Case 2 - annotation start within the paragraph  but ends in subsequent one\n  const resultsCaseTwo = isAnnotationStartWithinParagraph(annotations, paragraphFirstWordTime, paragraphLastWordTime);\n  if (resultsCaseTwo) {\n    return resultsCaseTwo;\n  }\n  // // Case 3 - annotation ends within the paragraph  but starts in previous one\n  const resultsCase3 = isAnnotationEndWithinParagraph(annotations, paragraphFirstWordTime, paragraphLastWordTime);\n  if (resultsCase3) {\n    return resultsCase3;\n  }\n  // // Case 4 - annotation spans across the current paragraph  but starts in previous one and ends in subsequent one\n  const resultsCaseFour = isAnnotationAcrossParagraph(annotations, paragraphFirstWordTime, paragraphLastWordTime);\n  if (resultsCaseFour) {\n    return resultsCaseFour;\n  }\n\n  return false;\n};\n\nexport default findAnnotationInParagraph;","import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { shortTimecode } from 'slate-transcript-editor';\nimport styles from './index.module.css';\n\n/**\n *  Paragraph display preferences based on search\n *\n *  styles to separate the look of non contiguous paragraphs?\n */\n\nclass Paragraph extends Component {\n\n  render() {\n    const { paragraphDisplayPreference } = this.props;\n    // const inContextSearch = paragraphDisplayPreference;\n    paragraphDisplayPreference.borderStyle = 'dashed';\n    paragraphDisplayPreference.borderWidth = '0.01em';\n    paragraphDisplayPreference.borderColor = 'lightgray';\n    paragraphDisplayPreference.padding = '0.5em';\n\n    // inContextSearch.display = 'block';\n    let paragraphStyle = {};\n    if (this.props.showParagraphsMatchingSearch) {\n      paragraphStyle = this.props.paragraphDisplayPreference;\n    }\n    else {\n      if (!paragraphDisplayPreference.display) {\n        delete paragraphDisplayPreference.display;\n        // paragraphStyle.borderColor = 'orange';\n        // paragraphStyle.borderStyle = 'dashed';\n        // paragraphStyle.borderWidth = '0.01em';\n        paragraphStyle.borderRight = '0.1em dashed lightgrey';\n        paragraphStyle.borderLeft = '0.1em dashed lightgrey';\n      }\n    }\n\n    return (\n      <Row\n        style={ { ...paragraphStyle } }\n        className=\"paragraph\"\n        data-paragraph-text={ this.props.paragraphTextWithoutPunctuation }\n      >\n        <Col xs={ 12 } sm={ 12 } md={ 3 } lg={ 3 } xl={ 2 }\n          style={ { cursor: 'pointer', width: '100%' } }\n          className={ 'text-truncate' }\n          title={ `${ this.props.speakerName.toUpperCase() } -  ${ shortTimecode(this.props.paragraph[0].start) } | Click on a speaker to jump to the corresponding time in the media.` }>\n          <span\n            className={ [ styles.speaker, styles.unselectable, 'timecode' ].join(' ') }\n            data-start={ this.props.paragraph[0].start }\n            tabIndex=\"0\"\n          >{this.props.speakerName}</span>\n        </Col>\n        {/* <Col xs={ 4 } sm={ 4 } md={ 2 } lg={ 2 } xl={ 1 }\n          style={ { padding: '0em', textAlign: 'center' } }\n          className={ styles.unselectable }\n        >\n          <span\n            style={ { cursor: 'pointer', width: '100%' } }\n            data-start={ this.props.paragraph[0].start }\n            className={ 'timecode' }\n            tabIndex=\"0\"\n            >\n            { shortTimecode(this.props.paragraph[0].start) }\n          </span>\n        </Col> */}\n        <Col xs={ 12 } sm={ 12 } md={ 9 } lg={ 9 } xl={ 10 }>\n          {this.props.wordsElements}\n        </Col>\n      </Row>\n    );\n  }\n}\nexport default Paragraph;","const removePunctuation = (string) => {\n  return string.replace(/\\.|\\?|!|,|;/, '').toLowerCase() ;\n};\n\nexport default removePunctuation;","import React, { Component } from 'react';\nimport { shortTimecode } from 'slate-transcript-editor';\n// import removePunctuation from '../../../../../../Util/remove-punctuation/index.js';\nimport removePunctuation from '../../../../../Util/remove-punctuation/index.js';\n\nclass Word extends Component {\n  generatePreviousTimes = (start) => {\n    let prevTimes = '';\n\n    for (let i = 0; i < start; i++) {\n      prevTimes += `${ i } `;\n    }\n\n    if (start % 1 > 0) {\n      // Find the closest quarter-second to the current time, for more dynamic results\n      const dec = Math.floor((start % 1) * 4.0) / 4.0;\n      prevTimes += ` ${ Math.floor(start) + dec }`;\n    }\n\n    return prevTimes;\n  }\n  render() {\n    const { transcriptId, speaker, word } = this.props;\n    // console.log('this.props.paragraph', this.props.transcriptId);\n    // const result = this.props.paragraph.map(word => {\n\n    return (\n      <span\n        style={{cursor: 'pointer'}}\n        title={ `start:${ shortTimecode(word.start) } - end:${ shortTimecode(word.end) } | Double click on a word to jump to the corresponding time in the media.` }\n        data-prev-times = { this.generatePreviousTimes( word.start) }\n        className={ [ 'words',\n          // , styles.highlightedWord\n        ].join(' ') }\n        data-start={ word.start }\n        // TODO: make/Use helper function in Util - removePunctuation\n        data-text={ removePunctuation(word.text) }\n        // data-text={ word.text }\n        data-end={ word.end }\n        data-transcript-id={ transcriptId }\n        data-speaker={ speaker }\n        key={ 'key_' + word.id + '_' + word.end }\n        // tabIndex=\"0\"\n        role=\"button\"\n        aria-pressed=\"false\"\n        onKeyDown={ this.props.handleKeyDownWords }\n      >\n        {word.text}{' '}\n      </span>\n    );\n    // });\n\n    // return (\n    //   <>{result}</>\n\n    // );\n  }\n};\n\nexport default Word;","import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Popover from 'react-bootstrap/Popover';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faPen,\n  faStickyNote,\n  faTrashAlt,\n  faTag\n} from '@fortawesome/free-solid-svg-icons';\n\nclass AnnotationOverlayTrigger extends Component {\n\n  handleEditAnnotation = () => {\n    let text;\n    this.props.handleEditAnnotation(this.props.annotationId, text );\n  }\n\n  render() {\n    // console.log('render - AnnotationOverlayTrigger - props', this.props);\n    // const { annotationLabelId } = this.props;\n    let overlayContent;\n    // handling edge case when labels are not available\n    if (this.props.labelsOptions) {\n      let label = this.props.labelsOptions.find((label) => {\n\n        return label.id === this.props.annotationLabelId;\n      });\n      // console.log('label:: ', label, annotationLabelId, this.props.labelsOptions, 'this.props.words', this.props.words, this.props.annotationNote);\n      // TODO: Quick fix - needs digging into why sometimes adding a new label crashes, and the `find` function above returns undefined\n      if (!label) {\n        label = this.props.labelsOptions[0];\n      }\n\n      overlayContent = <OverlayTrigger rootClose={ true } trigger=\"click\" placement=\"bottom\"\n        overlay={\n          <Popover id=\"popover-basic\" style={{padding: '1em'}}>\n            <Row>\n              <Col md={ 1 } style={ { backgroundColor: label.color, marginLeft:'1em' } }></Col>\n              <Col >\n                <FontAwesomeIcon icon={ faTag } />  {label.label}\n              </Col>\n              <Col md={ 1 } style={ { marginRight:'1em' } }\n                onClick={ () => {this.props.handleDeleteAnnotation(this.props.annotationId);} }>\n                <FontAwesomeIcon icon={ faTrashAlt } />\n              </Col>\n            </Row>\n            <hr/>\n            <FontAwesomeIcon icon={ faStickyNote }\n              onClick={ this.handleEditAnnotation }\n            />   { this.props.annotationNote }\n            <br/>\n            <FontAwesomeIcon icon={ faPen }\n              onClick={ this.handleEditAnnotation }\n            />\n          </Popover>\n        }\n      >\n        <span style={ { borderBottom: `0.1em ${ label.color } solid` } } className={ 'highlight' }>{this.props.words}</span>\n      </OverlayTrigger>;\n\n    }\n\n    return (<>\n      {overlayContent}\n    </>\n    );\n  }\n}\n\nexport default AnnotationOverlayTrigger;","/**\n * helper function to assign css display preferences\n * @param {boolean} isTextSearch\n * @param {boolean} isSpeakerSearch\n * @param {boolean} isLabelSearch\n */\nfunction computeParagraphDisplayPreference(isTextSearch, isSpeakerSearch, isLabelSearch) {\n  let displayPreference = {};\n  if (!isTextSearch) {\n    displayPreference = { display: 'none' };\n  }\n  if (!isSpeakerSearch) {\n    displayPreference = { display: 'none' };\n  }\n  if (!isLabelSearch) {\n    displayPreference = { display: 'none' };\n  }\n\n  return displayPreference;\n}\n\nexport default computeParagraphDisplayPreference;","const isAnnotationWithinWord = ( annotations, wordStartTime, wordEndTime) => {\n//   console.log('annotations', annotations, wordStartTime, wordEndTime);\n  const results = annotations.find(annotation => {\n    return (\n      wordStartTime >= annotation.start &&\n        wordEndTime <= annotation.end\n    );\n  });\n  //   console.log('isAnnotationWithinWord-results', results);\n\n  return results;\n};\n\nconst addAnnotationToWordsInOneParagraph = (words, annotations) => {\n  return words.map((word) => {\n    const annotationForWord = isAnnotationWithinWord(annotations, word.start, word.end);\n    if (annotationForWord) {\n      word.annotation = annotationForWord;\n      // console.log(word.annotation);\n    }\n    else {\n      // this is needed, for when a annotation is being removed from a word\n      delete word.annotation;\n    }\n\n    return word;\n  });\n\n};\n\nconst addAnnotationsToWordsInParagraphs = (paragraphsWithWordsSpeakerText, annotations) => {\n  return paragraphsWithWordsSpeakerText.map(paragraph => {\n    paragraph.words = addAnnotationToWordsInOneParagraph(paragraph.words, annotations);\n\n    return paragraph;\n  });\n};\n\nexport default addAnnotationsToWordsInParagraphs;","import React, { Component } from 'react';\n// import generateParagraphs from './generate-paragraphs/index.js';\nimport groupWordsInParagraphsBySpeakers from './group-words-by-speakers.js';\nimport findAnnotationInParagraph from './find-annotation-in-paragraph.js';\nimport Paragraph from './Paragraph.js';\nimport Word from './Word.js';\nimport AnnotationOverlayTrigger from './AnnotationOverlayTrigger.js';\nimport computeParagraphDisplayPreference from './compute-paragraph-display-preference.js';\nimport addAnnotationsToWordsInParagraphs from './add-annotations-to-words-in-paragraphs.js';\n// import removePunctuation from '../../../../../Util/remove-punctuation.js';\nconst removePunctuation = string => {\n  return string.replace(/\\.|\\?|!|,|;/, '').toLowerCase();\n};\n\nclass Paragraphs extends Component {\n  // for accessibility, being able to\n  // move with tabs and press enter on\n  // timecode to start playing from that point\n\n  // shouldComponentUpdate = () => {\n  //   return true;\n  // }\n  handleKeyDownTimecodes = e => {\n    if (e.key === 'Enter') {\n      this.props.handleTimecodeClick(e);\n    }\n  };\n\n  handleKeyDownWords = e => {\n    if (e.key === 'Enter') {\n      this.props.handleWordClick(e);\n    }\n  };\n\n  // generateParagraphsEl = () => {\n  render() {\n    let wordsElements;\n    let paragraphDisplayPreference = {};\n    // const props = this.props;\n    // const transcriptId = props.transcriptId;\n    // const annotations = props.annotations;\n\n    /**\n     *  Group words into paragraphs\n     *\n     * TODO: Breaking down words in paragraphs could be done\n     * client side or server side?\n     * using paragraphs attribute of transcript json\n     */\n    // console.log('this.props.transcriptJson.words', this.props.transcriptJson.words);\n    // console.log('this.props.transcriptJson.paragraphs', this.props.transcriptJson.paragraphs);\n\n    const paragraphsWithWordsSpeakerText = groupWordsInParagraphsBySpeakers(this.props.transcriptJson.words, this.props.transcriptJson.paragraphs);\n    // console.log('paragraphsWithWordsSpeakerText', paragraphsWithWordsSpeakerText);\n\n    const paragraphWithWordsSpeakersAndAnnotations = addAnnotationsToWordsInParagraphs(paragraphsWithWordsSpeakerText, this.props.annotations);\n    /**\n     * Loop over paragraphs\n     */\n    const textResult = paragraphWithWordsSpeakersAndAnnotations.map((paragraph, index) => {\n      const annotationInCurrentParagraph = findAnnotationInParagraph(this.props.annotations, paragraph.words);\n      /* Paragraph text for data attribute for searches, without punctuation */\n      const paragraphTextWithoutPunctuation = removePunctuation(paragraph.text);\n      const isTextSearch = paragraphTextWithoutPunctuation.includes(this.props.searchString.toLowerCase());\n      let isSpeakerSearch = false;\n      if (this.props.selectedOptionSpeakerSearch.length !== 0) {\n        // checks speaker against list of speakers in search,\n        // TODO: Downcase comparison or use speaker ID?\n        if (\n          this.props.selectedOptionSpeakerSearch.find(spk => {\n            return spk.label === paragraph.speaker;\n          })\n        ) {\n          isSpeakerSearch = true;\n        }\n      } else {\n        isSpeakerSearch = true;\n      }\n\n      let isLabelSearch = false;\n      if (this.props.selectedOptionLabelSearch.length !== 0) {\n        // checks label against list of speakers in search,\n        if (\n          this.props.selectedOptionLabelSearch.find(lb => {\n            return lb.id === annotationInCurrentParagraph.labelId;\n          })\n        ) {\n          isLabelSearch = true;\n        }\n      } else {\n        isLabelSearch = true;\n      }\n      paragraphDisplayPreference = computeParagraphDisplayPreference(isTextSearch, isSpeakerSearch, isLabelSearch);\n\n      /**\n       * find Annotation In Paragraph/words\n       */\n      wordsElements = paragraph.words.map((word, index) => {\n        let result;\n        const wordEl = (\n          <Word\n            transcriptId={this.props.transcriptId}\n            speaker={paragraph.speaker}\n            key={'key--' + index}\n            word={word}\n            handleKeyDownWords={e => {\n              return e.key === 'Enter' ? this.props.handleWordClick(e) : null;\n            }}\n          />\n        );\n\n        if (word.annotation) {\n          // const { annotation } = word;\n          result = (\n            <AnnotationOverlayTrigger\n              key={'key----' + index}\n              words={wordEl}\n              labelsOptions={this.props.labelsOptions}\n              annotationLabelId={word.annotation.labelId}\n              annotationId={word.annotation.id}\n              annotationNote={word.annotation.note}\n              handleDeleteAnnotation={this.props.handleDeleteAnnotation}\n              handleEditAnnotation={this.props.handleEditAnnotation}\n            />\n          );\n        } else {\n          result = wordEl;\n        }\n\n        return result;\n      });\n\n      /**\n       * Create a Paragraph containing words, with or without annotation (overlay)\n       */\n      return (\n        <Paragraph\n          showParagraphsMatchingSearch={this.props.showParagraphsMatchingSearch}\n          paragraphDisplayPreference={paragraphDisplayPreference}\n          key={'key------' + index}\n          paragraphTextWithoutPunctuation={paragraphTextWithoutPunctuation}\n          speakerName={paragraph.speaker}\n          paragraph={paragraph.words}\n          handleKeyDownTimecodes={e => {\n            return e.key === 'Enter' ? this.props.handleTimecodeClick(e) : null;\n          }}\n          wordsElements={wordsElements}\n        />\n      );\n    });\n\n    return <>{textResult}</>;\n  }\n}\n\nexport default Paragraphs;\n"],"sourceRoot":""}