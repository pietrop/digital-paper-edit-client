{"version":3,"sources":["Components/lib/CustomAlert/index.js","App.js","serviceWorker.js","index.js"],"names":["CustomAlert","props","handleDismiss","setState","show","state","this","variant","onClose","dismissible","heading","Heading","message","children","React","Component","Projects","lazy","Project","TranscriptCorrect","PaperEdit","demoWarningMessage","Alert","Link","href","target","rel","NoMatch","App","transcriptJson","envWarning","offlineWarning","Container","navigator","onLine","fallback","Row","Skeleton","width","height","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAIMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,cAAgB,kBAAM,EAAKC,SAAS,CAAEC,MAAM,KAL1C,EAAKC,MAAQ,CACXD,MAAM,GAHS,E,sEAUjB,OAAIE,KAAKD,MAAMD,KAEX,kBAAC,IAAD,CAAOG,QAASD,KAAKL,MAAMM,QAASC,QAASF,KAAKJ,cAAeO,aAAW,GACzEH,KAAKL,MAAMS,QAAU,kBAAC,IAAMC,QAAP,KAAgBL,KAAKL,MAAMS,SAA2B,GAC3EJ,KAAKL,MAAMW,QACXN,KAAKL,MAAMY,UAKd,oCACE,kC,GAtBgBC,IAAMC,WA6BjBf,O,qPCrBTgB,EAAWC,gBAAK,kBAAM,6EACtBC,EAAUD,gBAAK,kBAAM,8EACrBE,EAAoBF,gBAAK,kBAAM,+DAC/BG,EAAYH,gBAAK,kBAAM,sEAOvBI,EACJ,oCACE,2BACG,IADH,oCAEoC,IAClC,kBAACC,EAAA,EAAMC,KAAP,CAAYC,KAAK,uDAAuDC,OAAO,SAASC,IAAI,uBAA5F,+CAHF,IAMI,KAEJ,yGAIEC,EAAU,WACd,OAAO,kFAyEMC,E,YArEb,WAAY3B,GAAQ,IAAD,8BACjB,4CAAMA,KAEDI,MAAQ,CACXwB,eAAgB,MAJD,E,sEAWjB,IAAIC,EAAa,KACbC,EAAiB,KAqBrB,OAlBED,EACE,kBAACE,EAAA,EAAD,KACE,kBAAChC,EAAA,EAAD,CAAaO,QAAS,UAAWG,QAAS,YAAaE,QAASS,KAKjEY,UAAUC,SACbH,EACE,oCACE,6BACA,kBAACC,EAAA,EAAD,KACE,kBAAChC,EAAA,EAAD,CAAaO,QAAS,UAAWG,QAAS,kBAAmBE,QAAS,uDAO5E,oCACGkB,EAEAC,EAED,kBAAC,aAAD,KACE,kBAAC,WAAD,CACEI,SACE,kBAACH,EAAA,EAAD,KACE,6BACA,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAU9B,QAAQ,OAAO+B,MAAO,OAAQC,OAAQ,MAElD,6BACA,kBAACH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAU9B,QAAQ,OAAO+B,MAAO,OAAQC,OAAQ,SAKtD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1B,IACjC,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,YAAYC,UAAW1B,IACzC,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,uBAAuBC,UAAWxB,IACpD,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,yDAAyDC,UAAWvB,IACtF,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,+CAA+CC,UAAWtB,IAC5E,kBAAC,IAAD,CAAOsB,UAAWf,Y,GA7DdZ,aC5BE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBlB,WACrBA,UAAUmB,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.369b7ddb.chunk.js","sourcesContent":["import React from 'react';\nimport Alert from 'react-bootstrap/Alert';\n\n// https://react-bootstrap.netlify.com/components/alerts/#dismissing\nclass CustomAlert extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: true,\n    };\n  }\n\n  handleDismiss = () => this.setState({ show: false });\n\n  render() {\n    if (this.state.show) {\n      return (\n        <Alert variant={this.props.variant} onClose={this.handleDismiss} dismissible>\n          {this.props.heading ? <Alert.Heading>{this.props.heading}</Alert.Heading> : ''}\n          {this.props.message}\n          {this.props.children}\n        </Alert>\n      );\n    } else {\n      return (\n        <>\n          <br />\n        </>\n      );\n    }\n  }\n}\n\nexport default CustomAlert;\n","import React, { Component, Suspense, lazy } from 'react';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\nimport 'bootstrap-css-only/css/bootstrap.css';\n// TODO: Note: Replace ^[theme]^ (examples: materia, darkly, slate, cosmo, spacelab, and superhero. See https://bootswatch.com for current theme names.)\n// https://www.npmjs.com/package/react-bootstrap-theme-switcher\n// import 'bootswatch/dist/litera/bootstrap.min.css';\n\nimport CustomAlert from './Components/lib/CustomAlert';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Alert from 'react-bootstrap/Alert';\nimport Skeleton from '@material-ui/lab/Skeleton';\nconst Projects = lazy(() => import('./Components/Projects/index.js'));\nconst Project = lazy(() => import('./Components/Projects/Project.js'));\nconst TranscriptCorrect = lazy(() => import('./Components/Transcripts/TranscriptCorrect.js'));\nconst PaperEdit = lazy(() => import('./Components/PaperEdits/PaperEdit'));\n\n// import Projects from './Components/Projects/index.js';\n// import Project from './Components/Projects/Project.js';\n// import TranscriptCorrect from './Components/Transcripts/TranscriptCorrect.js';\n// import PaperEdit from './Components/PaperEdits/PaperEdit';\n\nconst demoWarningMessage = (\n  <>\n    <p>\n      {' '}\n      This is a demo version of the app{' '}\n      <Alert.Link href=\"https://github.com/pietrop/digital-paper-edit-client\" target=\"_blank\" rel=\"noopener noreferrer\">\n        see project Github repository for more info\n      </Alert.Link>\n      .{' '}\n    </p>\n    <p>This is a read-only demo you can only play around with existing projects!</p>\n  </>\n);\n\nconst NoMatch = () => {\n  return <h1>There was an error loading the page you requested</h1>;\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      transcriptJson: null,\n    };\n  }\n  // TODO: remove unused rootes\n\n  // eslint-disable-next-line class-methods-use-this\n  render() {\n    let envWarning = null;\n    let offlineWarning = null;\n\n    if (process.env.REACT_APP_NODE_ENV === 'demo') {\n      envWarning = (\n        <Container>\n          <CustomAlert variant={'warning'} heading={'Demo mode'} message={demoWarningMessage} />\n        </Container>\n      );\n    }\n\n    if (!navigator.onLine) {\n      offlineWarning = (\n        <>\n          <br />\n          <Container>\n            <CustomAlert variant={'warning'} heading={'Offline warning'} message={\"You don't seem to be connected to the internet \"} />\n          </Container>\n        </>\n      );\n    }\n\n    return (\n      <>\n        {envWarning}\n\n        {offlineWarning}\n\n        <HashRouter>\n          <Suspense\n            fallback={\n              <Container>\n                <br />\n                <Row>\n                  <Skeleton variant=\"rect\" width={'100%'} height={50} />\n                </Row>\n                <br />\n                <Row>\n                  <Skeleton variant=\"rect\" width={'100%'} height={600} />\n                </Row>\n              </Container>\n            }\n          >\n            <Switch>\n              <Route exact path=\"/\" component={Projects} />\n              <Route exact path=\"/projects\" component={Projects} />\n              <Route exact path=\"/projects/:projectId\" component={Project} />\n              <Route exact path=\"/projects/:projectId/transcripts/:transcriptId/correct\" component={TranscriptCorrect} />\n              <Route exact path=\"/projects/:projectId/paperedits/:papereditId\" component={PaperEdit} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Suspense>\n        </HashRouter>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}