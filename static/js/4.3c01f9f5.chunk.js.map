{"version":3,"sources":["ApiWrapper/cors_wrapper.js","ApiWrapper/ApiWrapper.js","ApiWrapper/DemoApiWrapper/index.js","ApiWrapper/index.js","Util/which-js-env/index.js","Components/lib/CustomBreadcrumb/index.js"],"names":["METHODS","validateRESTMethod","method","includes","Error","getCorsConfig","corsConfig","data","applicationType","mode","body","JSON","stringify","headers","corsFetch","url","a","async","fetch","ApiWrapper","projectsIdUrl","projectId","projectsUrl","transcriptsUrl","transcriptsIdUrl","transcriptId","queryParamsOptions","queryParams","querystring","trim","paperEditsUrl","paperEditsIdUrl","paperEditId","annotationsUrl","annotationsIdUrl","annotationId","labelsUrl","labelsIdUrl","labelsId","this","baseUrl","window","env","API_URL","res","json","projects","id","getProject","resProject","projectTitle","project","title","transcriptTitle","labelId","paperedits","getTranscript","transcriptResult","getAllLabels","labelsResults","getAllAnnotations","annotationsResult","results","labels","transcript","annotations","papereditId","getTranscripts","transcriptsResult","Promise","all","transcripts","map","transcriptsJson","annotationsJson","forEach","tr","currentAnnotationsSet","find","getPaperEdit","paperEditResult","projectResult","programmeScript","fileName","resolve","reject","input","output","ffmpegPath","waveForm","waveFormMode","waveFormColor","DemoApiWrapper","response","length","_id","status","alert","ok","filter","formData","annotation","defaultLabel","label","unshift","paperedit","paperEdit","statusCode","jsENV","whichJsEnv","console","log","demoApiWrapper","Object","freeze","apiWrapper","electronWrapper","ElectronWrapper","adobeCEPWrapper","AdobeCEPWrapper","undefined","process","versions","electron","debug","cep","error","CustomBreadcrumb","breadcrumbs","props","items","item","index","link","key","to","Item","name","active","scoped","backgroundColor","Component"],"mappings":"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","file":"static/js/4.3c01f9f5.chunk.js","sourcesContent":["/**\n * Helper function tto wrap fetch post request\n * https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Supplying_request_options\n * @param {string} url - API end point\n * @param {object} data - json data to send\n */\n\nconst METHODS = [ 'GET', 'POST', 'PUT', 'DELETE' ];\n\nconst validateRESTMethod = (method) => {\n  if (!METHODS.includes(method)) {\n    throw new Error(`Wrong method passed ${ method } - should be one of ${ METHODS }`);\n  }\n\n  return;\n\n};\n\nconst getCorsConfig = (method, data = {}, applicationType) => {\n  let corsConfig;\n\n  if (method === 'PUT') {\n    corsConfig = {\n      method: method,\n      mode: 'cors',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n  } else if (method === 'POST') {\n\n    corsConfig = {\n      method: method,\n      // TODO: commenting all of these settings out as with those on file upload doesn't work :man-shrugging: . Needs further investigation.\n      // mode: 'no-cors',\n      // cache: 'no-cache',\n      // credentials: 'same-origin',\n      // headers: {\n      //   'Content-Type': 'application/json'\n      // },\n      // redirect: 'follow',\n      // referrer: 'no-referrer',\n      // NOTE: Form data contains a file, so should not be stringified\n      // body: data\n    };\n    // if sending data as a json file\n    if (applicationType === 'json') {\n      corsConfig.headers = {\n        'Content-Type': 'application/json'\n      };\n      corsConfig.body = JSON.stringify(data);\n    }\n    // if sending something else like a video or audio file in form body\n    else {\n      corsConfig.body = data;\n    }\n  }\n  else {\n    corsConfig = {\n      method: method,\n      mode: 'cors'\n    };\n  }\n\n  return corsConfig;\n};\n\nasync function corsFetch(url, method = 'GET', data = {}, applicationType) {\n  validateRESTMethod(method);\n  const corsConfig = getCorsConfig(method, data, applicationType);\n\n  return await fetch(url, corsConfig);\n}\n\nexport default corsFetch;\n","import querystring from 'querystring';\nimport corsFetch from './cors_wrapper.js';\n\nclass ApiWrapper {\n  constructor() {\n    this.baseUrl = window.env.API_URL;\n    window.env.API_URL = null;\n\n    this.projectsUrl = `${ this.baseUrl }/api/projects`;\n  }\n  projectsIdUrl = (projectId) => `${ this.projectsUrl }/${ projectId }`;\n\n  transcriptsUrl = (projectId) => `${ this.projectsIdUrl(projectId) }/transcripts`;\n  transcriptsIdUrl = (projectId, transcriptId, queryParamsOptions) => {\n    const queryParams = queryParamsOptions\n      ? `?${ querystring.stringify(queryParamsOptions) }`\n      : '';\n\n    return `${ this.transcriptsUrl(projectId) }/${ transcriptId }${ queryParams }`.trim();\n  };\n\n  paperEditsUrl = (projectId) => `${ this.projectsIdUrl(projectId) }/paperedits`;\n  paperEditsIdUrl = (projectId, paperEditId) => `${ this.projectsIdUrl(projectId) }/paperedits/${ paperEditId }`;\n\n  annotationsUrl = (projectId, transcriptId) => `${ this.transcriptsIdUrl(projectId, transcriptId) }/annotations`;\n  annotationsIdUrl = (projectId, transcriptId, annotationId) => `${ this.transcriptsIdUrl(projectId, transcriptId) }/annotations/${ annotationId }`;\n\n  labelsUrl = (projectId) => `${ this.projectsIdUrl(projectId) }/labels`;\n  labelsIdUrl = (projectId, labelsId) => `${ this.projectsIdUrl(projectId) }/labels/${ labelsId }`;\n\n  /**\n   * Projects\n   */\n  async getAllProjects() {\n    const res = await corsFetch(this.projectsUrl);\n    const json = await res.json();\n\n    return json.projects;\n  }\n\n  async getProject(id) {\n    const res = await corsFetch(this.projectsIdUrl(id));\n    const json = await res.json();\n\n    return json;\n  }\n\n  async createProject(data) {\n    const res = await corsFetch(this.projectsUrl, 'POST', data, 'json');\n\n    return await res.json();\n  }\n\n  async updateProject(id, data) {\n    const res = await corsFetch(this.projectsIdUrl(id), 'PUT', data);\n    const json = await res.json();\n\n    return json;\n  }\n\n  async deleteProject(id) {\n    const res = await corsFetch(this.projectsIdUrl(id), 'DELETE');\n\n    return res;\n  }\n\n  /**\n   * Transcripts\n   */\n  async getTranscripts(projectId) {\n    const res = await corsFetch(this.transcriptsUrl(projectId));\n    const json = await res.json();\n\n    return json;\n  }\n\n  async createTranscript(projectId, data) {\n    const res = await corsFetch(this.transcriptsUrl(projectId), 'POST', data);\n    const json = await res.json();\n\n    return json;\n  }\n  async getTranscript(projectId, transcriptId, queryParamsOptions) {\n    const res = await corsFetch(this.transcriptsIdUrl(projectId, transcriptId, queryParamsOptions));\n    const json = await res.json();\n    // get project title\n    const resProject = await this.getProject(projectId);\n    // console.log('resProject', resProject.project.title, json);\n    json.projectTitle = resProject.project.title;\n    json.transcriptTitle = json.title;\n    delete json.title;\n\n    return json;\n  }\n\n  async updateTranscript(projectId, transcriptId, queryParamsOptions, data) {\n    const res = await corsFetch(this.transcriptsIdUrl(projectId, transcriptId, queryParamsOptions), 'PUT', data);\n\n    return res;\n  }\n\n  async deleteTranscript(projectId, transcriptId) {\n    const res = await corsFetch(this.transcriptsIdUrl(projectId, transcriptId), 'DELETE');\n\n    return res;\n  }\n\n  /**\n   * Annotations\n   */\n  async getAllAnnotations(projectId, transcriptId) {\n    const res = await fetch(this.annotationsUrl(projectId, transcriptId));\n    // console.log('getAllAnnotations', res);\n    const json = await res.json();\n\n    return json;\n  }\n\n  // not used\n  async getAnnotation(projectId, transcriptId, annotationId) {\n    const res = await corsFetch(this.annotationsIdUrl(projectId, transcriptId, annotationId));\n    const json = await res.json();\n\n    return json;\n  }\n\n  async createAnnotation(projectId, transcriptId, data) {\n    const res = await corsFetch(this.annotationsUrl(projectId, transcriptId), 'POST', data, 'json');\n\n    return await res.json();\n  }\n\n  async updateAnnotation(projectId, transcriptId, annotationId, data) {\n    const res = await corsFetch(this.annotationsIdUrl(projectId, transcriptId, annotationId), 'PUT', data);\n    const json = await res.json();\n\n    return json;\n  }\n\n  async deleteAnnotation(projectId, transcriptId, annotationId) {\n    const res = await corsFetch(this.annotationsIdUrl(projectId, transcriptId, annotationId), 'DELETE');\n    const json = await res.json();\n\n    return json;\n  }\n\n  /**\n   * Labels\n   */\n\n  // Get All Labels\n  async getAllLabels(projectId) {\n    const res = await fetch(this.labelsUrl(projectId));\n    const json = await res.json();\n\n    return json;\n  }\n  // Get Label - not used\n  async getLabel(projectId, labelId) {\n    const res = await corsFetch(this.labelsIdUrl(projectId, labelId));\n    const json = await res.json();\n\n    return json;\n  }\n\n  // Create Label\n  async createLabel(projectId, data) {\n    const res = await corsFetch(this.labelsUrl(projectId), 'POST', data, 'json');\n    const json = await res.json();\n\n    return json;\n  }\n  // Update Label\n  async updateLabel(projectId, labelId, data) {\n    const res = await corsFetch(this.labelsIdUrl(projectId, labelId), 'PUT', data);\n    const json = await res.json();\n\n    return json;\n  }\n  // Delete Label\n  async deleteLabel(projectId, labelId) {\n    const res = await corsFetch(this.labelsIdUrl(projectId, labelId), 'DELETE');\n    const json = await res.json();\n\n    return json;\n  }\n  /**\n   * PaperEdits\n   */\n  async getAllPaperEdits(projectId) {\n    const res = await corsFetch(this.paperEditsUrl(projectId));\n    const json = await res.json();\n\n    return json.paperedits;\n  }\n\n  async getPaperEdit(projectId, id) {\n    const res = await corsFetch(this.paperEditsIdUrl(projectId, id));\n    const json = await res.json();\n\n    return json;\n  }\n\n  async createPaperEdit(projectId, data) {\n    const res = await corsFetch(this.paperEditsUrl(projectId), 'POST', data, 'json');\n\n    return await res.json();\n  }\n\n  async updatePaperEdit(projectId, id, data) {\n    const res = await corsFetch(this.paperEditsIdUrl(projectId, id), 'PUT', data);\n    const json = await res.json();\n\n    return json;\n  }\n\n  async deletePaperEdit(projectId, id) {\n    const res = await corsFetch(this.paperEditsIdUrl(projectId, id), 'DELETE');\n\n    return res;\n  }\n\n  /**\n   * Helper SDK function to avoid making multiple calls client side when in Annotated Transcript view\n   * Transcript + Annotations for that transcript + Labels for the project\n   */\n  async getTranscriptLabelsAnnotations(projectId, transcriptId) {\n    // GET Transcripts\n    const transcriptResult = await this.getTranscript(projectId, transcriptId);\n    // GET Labels for Project <-- or separate request in label component\n    const labelsResults = await this.getAllLabels(projectId, transcriptId);\n    // GET Annotation for Transcript\n    const annotationsResult = await this.getAllAnnotations(projectId, transcriptId);\n\n    // Combine results\n    const results = {\n      transcriptId: transcriptId,\n      projectId: projectId,\n      projectTitle: transcriptResult.projectTitle,\n      transcriptTitle: transcriptResult.transcriptTitle,\n      url: transcriptResult.url,\n      labels: labelsResults.labels,\n      transcript:  transcriptResult.transcript,\n      annotations: annotationsResult.annotations\n    };\n\n    return results;\n  }\n\n  // Helper function to get program script & associated transcript\n  // https://flaviocopes.com/javascript-async-await-array-map/\n  async getProgrammeScriptAndTranscripts(projectId, papereditId) {\n    // get transcripts list, this contain id, title, description only\n    const transcriptsResult = await this.getTranscripts(projectId);\n    // use that list of ids to loop through and get json payload for each individual transcript\n    // as separate request\n\n    // TODO: also add annotations for each Transcripts\n    const transcriptsJson = await Promise.all(transcriptsResult.transcripts.map((transcript) => {\n      // const annotations = this.getAllAnnotations(projectId, transcript.id);\n      const transcriptTmp = this.getTranscript(projectId, transcript.id);\n      // transcriptTmp.annotations = annotations;\n\n      return transcriptTmp;\n    }));\n\n    const annotationsJson = await Promise.all(transcriptsResult.transcripts.map((transcript) => {\n      const annotations = this.getAllAnnotations(projectId, transcript.id);\n\n      return annotations;\n    }));\n\n    // add annotations to transcript\n    transcriptsJson.forEach((tr) => {\n      // get annotations for transcript\n      const currentAnnotationsSet = annotationsJson.find((a) => {\n\n        return a.transcriptId === tr.id;\n      });\n      // if there are annotations for this transcript add them to it\n      if (currentAnnotationsSet) {\n        tr.annotations = currentAnnotationsSet.annotations;\n\n        return;\n      }\n      else {\n        tr.annotations = [];\n      }\n    });\n\n    // getting program script for paperEdit\n    const paperEditResult = await this.getPaperEdit(projectId, papereditId);\n    // getting project info - eg to get tile and description\n    const projectResult = await this.getProject(projectId);\n    // Get labels\n    const labelsResults = await this.getAllLabels(projectId);\n    // package results\n    const results = {\n      programmeScript: paperEditResult.programmeScript,\n      project: projectResult.project,\n      // each transcript contains its annotations\n      transcripts: transcriptsJson,\n      labels: labelsResults.labels\n    };\n\n    return results;\n  }\n\n  async exportVideo(data, fileName){\n    return new Promise((resolve, reject) => {\n      // In electron prompt for file destination \n      // default to desktop on first pass \n      const ffmpegRemixData = {\n        input: data, \n        output: `~/Desktop/${fileName}`,\n        ffmpegPath: ''//add electron ffmpeg bin \n      }\n      resolve(ffmpegRemixData)\n    })\n  }\n\n  async exportAudio(data, fileName,waveForm, waveFormMode, waveFormColor){\n    return new Promise((resolve, reject) => {\n      // In electron prompt for file destination \n      // default to desktop on first pass \n      const ffmpegRemixData = {\n        input: data, \n        output: `~/Desktop/${fileName}`,\n        ffmpegPath: ''//add electron ffmpeg bin \n      }\n      resolve(ffmpegRemixData)\n    })\n  }\n}\n\nexport default ApiWrapper;","class DemoApiWrapper {\n  /**\n   * Projects\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async getAllProjects() {\n    const response = await fetch('db/projects.json');\n    const projects = await response.json();\n    let results = 0;\n    if (projects.length !== 0) {\n      results = projects.map((project) => {\n        project.id = project._id;\n\n        return project;\n      });\n\n      return results;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async getProject(id) {\n    const response = await fetch('db/projects.json');\n    const projects = await response.json();\n    const project = projects.find((project) => {\n      return project._id === id;\n    });\n\n    return { status: 'ok', project:project };\n  }\n\n  async createProject(data) {\n    alert('Not implemented in demo mode');\n\n    return { status: 'false' };\n  }\n\n  async updateProject(id, data) {\n    alert('Not implemented in demo mode');\n\n    return { status: 'false' };\n  }\n\n  async deleteProject(id) {\n    alert('Not implemented in demo mode');\n\n    return { ok: false, status: 'false', project: { } };\n  }\n\n  /**\n   * Transcripts\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async getTranscripts(projectId) {\n    const response = await fetch('db/transcripts.json');\n    let transcripts = await response.json();\n    transcripts = transcripts.filter((transcript) => {\n      return transcript.projectId === projectId;\n    });\n\n    transcripts = transcripts.map((transcript) => {\n      transcript.id = transcript._id;\n\n      return transcript;\n    });\n\n    return { transcripts: transcripts };\n  }\n\n  async createTranscript(projectId, formData, data) {\n    alert('Not implemented in demo mode');\n\n    return { status: 'false' };\n  }\n\n  async getTranscript(projectId, transcriptId, queryParamsOptions) {\n    const response = await fetch('db/transcripts.json');\n    const transcripts = await response.json();\n    const transcript = transcripts.find((transcript) => {\n      return transcript._id === transcriptId;\n    });\n\n    transcript.id = transcript._id;\n    const resProject = await this.getProject(projectId);\n    transcript.projectTitle = resProject.project.title;\n    transcript.transcriptTitle = transcript.title;\n\n    return transcript;\n  }\n\n  async updateTranscript(projectId, transcriptId, queryParamsOptions, data) {\n    alert('Not implemented in demo mode');\n\n    return { ok: false };\n  }\n\n  async deleteTranscript(projectId, transcriptId) {\n    alert('Not implemented in demo mode');\n\n    return { ok: false, status: 'false' };\n  }\n\n  /**\n   * Annotations\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async getAllAnnotations(projectId, transcriptId) {\n\n    const response = await fetch('db/annotations.json');\n    let annotations = await response.json();\n\n    annotations = annotations.filter((annotation) => {\n      return annotation.transcriptId === transcriptId;\n    });\n\n    if (annotations) {\n      annotations = annotations\n        .map((annotation) => {\n          annotation.id = annotation._id;\n\n          return annotation;\n        });\n    } else {\n      annotations = [];\n    }\n\n    return { annotations };\n  }\n\n  // not used\n  async getAnnotation(projectId, transcriptId, annotationId) {\n    const response = await fetch('db/annotations.json');\n    const annotations = await response.json();\n    const annotation = annotations[0];\n\n    return { annotation };\n  }\n\n  async createAnnotation(projectId, transcriptId, data) {\n    alert('Not implemented in demo mode');\n\n    return { 'ok': false, status: 'false', annotation: [] };\n  }\n\n  async deleteAnnotation(projectId, transcriptId, annotationId) {\n    alert('Not implemented in demo mode');\n\n    return { 'ok': false, status: 'false' };\n  }\n\n  /**\n   * Labels\n   */\n\n  // Get All Labels\n  // eslint-disable-next-line class-methods-use-this\n  async getAllLabels(projectId) {\n    const response = await fetch('db/labels.json');\n    let labels = await response.json();\n    const defaultLabel = labels[0];\n    labels = labels.filter((label) => {\n      return label.projectId === projectId;\n    });\n    labels.unshift(defaultLabel);\n\n    if (!labels) {\n      labels = [];\n    }\n\n    return { ok: true, status: 'ok', labels };\n  }\n  // Get Label - not used\n  async getLabel(projectId, labelId) {\n    const response = await fetch('db/labels.json');\n    const labels = await response.json();\n    const label = labels[0];\n\n    return { ok: true, status: 'ok', label };\n  }\n\n  // Create Label\n  async createLabel(projectId, data) {\n    alert('Not implemented in demo mode');\n\n    return ({ ok: false, status: 'false' });\n  }\n\n  // Update Label\n  async updateLabel(projectId, labelId, data) {\n    alert('Not implemented in demo mode');\n\n    return { ok: false, status: 'false' };\n  }\n  // Delete Label\n  async deleteLabel(projectId, labelId) {\n    alert('Not implemented in demo mode');\n\n    return { status: 'false' };\n  }\n  /**\n   * PaperEdits\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async getAllPaperEdits(projectId) {\n    const response = await fetch('db/paperedits.json');\n    let paperedits = await response.json();\n    paperedits = paperedits.filter((paperedit) => {\n      return paperedit.projectId === projectId;\n    });\n    const data = {};\n    data.paperedits = [];\n    data.paperedits = paperedits;\n    if (data.paperedits) {\n      data.paperedits = data.paperedits\n        .map((paperedit) => {\n          paperedit.id = paperedit._id;\n\n          return paperedit;\n        });\n    }\n\n    return data.paperedits;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async getPaperEdit(projectId, id) {\n    const paperEditId = id;\n    const response = await fetch('db/paperedits.json');\n    const paperedits = await response.json();\n    const paperEdit = paperedits.find((paperedit) => {\n      return paperedit.id === paperEditId;\n    });\n    if (!paperEdit) {\n      const err = new Error('No paper edit found');\n      err.statusCode = 404;\n    }\n\n    return { ok: true, status: 'ok', programmeScript: paperEdit };\n  }\n\n  async createPaperEdit(projectId, data) {\n    alert('Not implemented in demo mode');\n\n    return { ok: false, status: 'false' };\n  }\n\n  async updatePaperEdit(projectId, id, data) {\n    alert('Not implemented in demo mode');\n\n    return { ok:true, status: 'false' };\n  }\n\n  async deletePaperEdit(projectId, id) {\n    alert('Not implemented in demo mode');\n\n    return { ok: false, status: 'false' };\n  }\n\n  /**\n   * Helper SDK function to avoid making multiple calls client side when in Annotated Transcript view\n   * Transcript + Annotations for that transcript + Labels for the project\n   */\n  async getTranscriptLabelsAnnotations(projectId, transcriptId) {\n    // GET Transcripts\n    const transcriptResult = await this.getTranscript(projectId, transcriptId);\n    // GET Labels for Project <-- or separate request in label component\n    const labelsResults = await this.getAllLabels(projectId, transcriptId);\n    // GET Annotation for Transcript\n    const annotationsResult = await this.getAllAnnotations(projectId, transcriptId);\n\n    // Combine results\n    const results = {\n      transcriptId: transcriptId,\n      projectId: projectId,\n      projectTitle: transcriptResult.projectTitle,\n      transcriptTitle: transcriptResult.transcriptTitle,\n      url: transcriptResult.url,\n      labels: labelsResults.labels,\n      transcript:  transcriptResult.transcript,\n      annotations: annotationsResult.annotations\n    };\n\n    return results;\n  }\n\n  // Helper function to get program script & associated transcript\n  // https://flaviocopes.com/javascript-async-await-array-map/\n  async getProgrammeScriptAndTranscripts(projectId, papereditId) { // // get transcripts list, this contain id, title, description only\n    const transcriptsResult = await this.getTranscripts(projectId);\n    // use that list of ids to loop through and get json payload for each individual transcript\n    // as separate request\n\n    const transcriptsJson = await Promise.all(transcriptsResult.transcripts.map((transcript) => {\n      const transcriptTmp = this.getTranscript(projectId, transcript.id);\n\n      return transcriptTmp;\n    }));\n\n    const annotationsJson = await Promise.all(transcriptsResult.transcripts.map((transcript) => {\n      const annotations = this.getAllAnnotations(projectId, transcript.id);\n\n      return annotations;\n    }));\n\n    // add annotations to transcript\n    transcriptsJson.forEach((tr) => {\n      // get annotations for transcript\n      const currentAnnotationsSet = annotationsJson.find((a) => {\n\n        return a.transcriptId === tr.id;\n      });\n      // if there are annotations for this transcript add them to it\n      if (currentAnnotationsSet) {\n        tr.annotations = currentAnnotationsSet.annotations;\n\n        return;\n      }\n      else {\n        tr.annotations = [];\n      }\n    });\n\n    // getting program script for paperEdit\n    const paperEditResult = await this.getPaperEdit(projectId, papereditId);\n    // getting project info - eg to get tile and description\n    const projectResult = await this.getProject(projectId);\n    // Get labels\n    const labelsResults = await this.getAllLabels(projectId);\n    // package results\n    const results = {\n      programmeScript: paperEditResult.programmeScript,\n      project: projectResult.project,\n      // each transcript contains its annotations\n      transcripts: transcriptsJson,\n      labels: labelsResults.labels\n    };\n\n    return results;\n  }\n}\n\n// module.exports = DemoApiWrapper;\nexport default DemoApiWrapper;","import ApiWrapper from './ApiWrapper';\nimport DemoApiWrapper from './DemoApiWrapper/index.js';\nimport whichJsEnv from '../Util/which-js-env';\n\nconst jsENV = whichJsEnv();\n\n// dynamic export\n// https://medium.com/@WebReflection/javascript-dynamic-import-export-b0e8775a59d4\nexport default (() => {\n  // await async dependencies\n  // export the module\n  if (jsENV === 'demo') {\n    console.log('API Wrapper demo time!');\n    const demoApiWrapper = new DemoApiWrapper();\n    Object.freeze(demoApiWrapper);\n\n    return demoApiWrapper;\n  }\n  if (jsENV === 'browser') {\n    const apiWrapper = new ApiWrapper();\n    Object.freeze(apiWrapper);\n\n    return apiWrapper;\n  }\n  if (jsENV === 'electron') {\n    // try {\n    //   const { ipcRenderer } = require('electron');\n    //   const appPath = ipcRenderer.sendSync('synchronous-message-get-app-path', 'ping');\n    // const path = require('path');\n    // console.log(window.appPath, 'window.AppPath', 'process.cwd()', process.cwd());\n    //   window.process.chdir(appPath);\n    // const ElectronWrapper = require(path.join(window.appPath, 'src', 'ElectronWrapper', 'index.js'));\n    const ElectronWrapper = window.ElectronWrapper;\n    const electronWrapper = new ElectronWrapper();\n    Object.freeze(electronWrapper);\n    return electronWrapper;\n    // } catch (e) {\n    //   console.error('api wrapper electron', e);\n    // }\n  }\n  if (jsENV === 'cep') {\n    // TODO: not sure if this will work\n    // try {\n    // console.log('__dirname', __dirname);\n    // console.log('process.cwd()', process.cwd());\n    // /////////////////////////\n    // console.log('  process.chdir(__dirname);');\n    // process.chdir(__dirname);\n    // /////////////////////////\n    // console.log('__dirname', __dirname);\n    // console.log('process.cwd()', process.cwd());\n\n    // const path = require('path');\n    // const AdobeCEPWrapper = require(path.join(__dirname, 'src', 'AdobeCEPWrapper', 'index.js'));\n    // window.AdobeCEPWrapper = AdobeCEPWrapper;\n\n    const AdobeCEPWrapper = window.AdobeCEPWrapper;\n    const adobeCEPWrapper = new AdobeCEPWrapper();\n    Object.freeze(adobeCEPWrapper);\n\n    return adobeCEPWrapper;\n    // } catch (err) {\n    //   console.log('chdir: ' + err);\n    // }\n  }\n})();\n","/**\n * Determines the enviroment Javascript is being run on\n * @returns - 'browser', 'electron', 'cep'. where cep stands for adobe CEP panel\n */\nfunction whichJsEnv() {\n  // Is browser Eg client side app\n  if (window.process === undefined) {\n    // console.debug('In browser Environment');\n    if (process.env.REACT_APP_NODE_ENV === 'demo') {\n      return 'demo';\n    }\n\n    return 'browser';\n  } else {\n    if (window.process.versions.electron !== undefined) {\n      console.debug('In Electron Enviroment');\n      //   console.info('In Electron v: ', window.process.versions.electron);\n      //   console.info('Using chrome v: ', window.process.versions.chrome);\n      return 'electron';\n    } else if (window.process.versions.cep !== undefined) {\n      console.debug('In Adobe CEP Environment');\n      //   console.info('In Chromium v: ', window.process.versions.chromium);\n      //   console.info('In CEP (Adobe Common Extensibility Platform ) v: ', window.process.versions.cep);\n      //   console.info('adjusting current working directory for Adobe CEP');\n      //   console.log('Starting directory: ' + process.cwd());\n      // try {\n      //   // commenting out because of error \"chdir: Error: process.chdir is not supported\"\n      //   // process.chdir(__dirname);\n      //   // process.chdir('..');\n      //   // console.log('New directory: ' + process.cwd());\n      // }\n      // catch (err) {\n      //   console.log('chdir: ' + err);\n      // }\n      return 'cep';\n    } else {\n      console.error(\"couldn't determine the js environment\");\n\n      return undefined;\n    }\n  }\n}\n\nfunction isBrowser() {\n  return whichJsEnv() === 'browser';\n}\n\nfunction isElectron() {\n  return whichJsEnv() === 'electron';\n}\n\nfunction isCep() {\n  return whichJsEnv() === 'isCep';\n}\n\nexport default whichJsEnv;\n\nexport { isElectron, isBrowser, isCep, whichJsEnv };\n","import React, { Component } from 'react';\nimport Breadcrumb from 'react-bootstrap/Breadcrumb';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nclass CustomBreadcrumb extends Component {\n\n  render() {\n    const breadcrumbs = this.props.items.map((item, index) => {\n      if (item.link) {\n        return (\n          <LinkContainer key={ index } to={ item.link }>\n            <Breadcrumb.Item>{item.name}</Breadcrumb.Item>\n          </LinkContainer>\n        );\n      } else {\n        return (\n          <Breadcrumb.Item key={ index } active>\n            {item.name}\n          </Breadcrumb.Item>\n        );\n      }\n    });\n\n    return (\n      <>\n      <style scoped>\n        {`\n        .breadcrumb{ \n          background-color: ${this.props.backgroundColor};\n          ${this.props.backgroundColor? ' margin: 0px':''} \n          }\n        `}\n      </style>\n      <div\n      // className=\"d-none d-sm-block\"\n      >\n        <Breadcrumb>\n          {breadcrumbs}\n        </Breadcrumb>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default CustomBreadcrumb;\n"],"sourceRoot":""}