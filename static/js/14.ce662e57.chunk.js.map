{"version":3,"sources":["Components/PaperEdits/PaperEdit/Transcripts/LabelsList/css-color-names.js","Components/PaperEdits/PaperEdit/Transcripts/LabelsList/ColorOptionsFormGroup.js","Components/PaperEdits/PaperEdit/ProgramScript/ExportWaveForm sync /^/.//.*/.gif$","Components/PaperEdits/PaperEdit/ProgramScript/ExportWaveForm/cline.gif","Components/PaperEdits/PaperEdit/ProgramScript/ExportWaveForm/line.gif","Components/PaperEdits/PaperEdit/ProgramScript/ExportWaveForm/p2p.gif","Components/PaperEdits/PaperEdit/ProgramScript/ExportWaveForm/point.gif","Components/PaperEdits/PaperEdit/ProgramScript/PreviewCanvas2/Filler.js","Components/PaperEdits/PaperEdit/ProgramScript/PreviewCanvas2/ProgressBar.js","Components/PaperEdits/PaperEdit/ProgramScript/PreviewCanvas2/VideoContextPreview/VideoContextProgressBar.js","Components/PaperEdits/PaperEdit/ProgramScript/PreviewCanvas2/Controls.js","Components/PaperEdits/PaperEdit/ProgramScript/PreviewCanvas2/VideoContextPreview/index.js","Components/PaperEdits/PaperEdit/ProgramScript/PreviewCanvas2/index.js","Components/PaperEdits/PaperEdit/ProgramScript/ExportMenuItem/index.js","Components/PaperEdits/PaperEdit/ProgramScript/get-data-from-user-selection.js","Components/PaperEdits/PaperEdit/ProgramScript/divide-words-selections-into-paragraphs/index.js","Components/PaperEdits/PaperEdit/ProgramScript/programme-script-json-to-docx/index.js","Components/PaperEdits/PaperEdit/ProgramScript/ExportWaveForm/index.js","Components/PaperEdits/PaperEdit/ProgramScript/index.js"],"names":["csscolors","colorNamesList","Object","freeze","keys","splice","cssColorsList","key","push","value","label","color","counter","numberOfColor","length","randomColor","ColorOptionsFormGroup","props","useState","setColor","handleSetColor","console","log","handleColorSelectChange","Group","controlId","Label","xs","sm","md","lg","xl","onClick","tmpColor","variant","size","icon","faSyncAlt","Control","type","placeholder","onChange","e","target","colorValue","chroma","valid","name","style","backgroundColor","border","borderWidth","borderColor","padding","Text","className","width","triangle","onChangeComplete","hex","colors","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","Error","code","resolve","module","exports","Filler","percentage","background","height","borderRadius","ProgressBar","position","opacity","getPercentage","currentTime","duration","VideoContextProgressBar","ref","useRef","setPercentage","videoContext","setVideoContext","setWidth","useLayoutEffect","current","offsetWidth","useEffect","fillerAnimation","percent","requestAnimationFrame","offsetX","nativeEvent","playIcon","faPlay","pauseIcon","faPause","stopIcon","faStop","Controls","isPlaying","setIsPlaying","Col","Button","block","handlePause","handlePlay","handleStop","VideoContextPreview","canvasRef","VideoContext","playlist","forEach","sourceStart","start","src","node","startAt","stopAt","connect","destination","seconds","Row","marginTop","play","pause","vc","Date","toISOString","substr","defaultProps","PreviewCanvas","ExportMenuItem","title","text","tootlipDelay","OverlayTrigger","placement","delay","overlay","Tooltip","Dropdown","Item","eventKey","parseWordElDataset","wordEl","parseFloat","dataset","end","innerText","speaker","transcriptId","getDataFromUserWordsSelection","window","getSelection","isCollapsed","words","getRangeAt","cloneContents","querySelectorAll","Array","from","w","word","anchorNode","parentElement","isOneParagraph","firstword","filter","divideWordsSelectionsIntoParagraphs","previousWordSpeaker","currentParagraph","paragraphsResult","index","programmeScriptJsonToDocx","edlJson","isWithClipReference","transcriptTitle","doc","Document","creator","description","sections","events","event","Paragraph","heading","HeadingLevel","HEADING_1","spacing","after","children","TextRun","italics","bold","join","allCaps","clipName","shortTimecode","addSection","properties","TITLE","alignment","AlignmentType","CENTER","Promise","reject","Packer","toBlob","then","blob","catch","error","Example","show","setShow","waveFormMode","setWaveFormMode","waveFormColor","setWaveFormColor","handleClose","Modal","onHide","Header","closeButton","Title","Body","Form","as","mode","Image","require","alt","fluid","Footer","handleExportAudioPreviewWithVideoWaveform","ProgrammeScript","React","lazy","INSERT_POINT_ELEMENT","ProgramScript","mouseUpListener","document","selection","result","setState","tmpSelection","state","isAdvancedSelect","handleAddTranscriptSelectionToProgrammeScript","componentDidMount","ApiWrapper","getPaperEdit","projectId","papereditId","json","programmeScript","elements","addEventListener","componentWillUnmount","removeEventListener","handleProgrammeScriptOrderChange","list","handleSaveProgrammeScript","handleUpdatePreview","handleDeleteProgrammeScriptElement","i","handleEditProgrammeScriptElement","currentElement","newText","prompt","handleAddTranscriptElementToProgrammeScript","elementType","indexNumber","indexOfInsertPoint","getIndexPositionOfInsertPoint","newElement","cuid","insertPointElement","find","el","indexOf","handleAddTranscriptSelectionToProgrammeScriptTmpSave","labelId","reverse","paragraph","alert","collapse","getSequenceJsonEDL","edlSq","programmeScriptPaperCutsWithId","element","currentTranscript","transcripts","tr","mediaFps","metadata","fps","startTime","endTime","reelName","offset","timecode","sampleRate","getSequenceJsonForFfmpegRemix","source","url","handleExportEDL","edl","EDL","downloadjs","compose","handleExportADL","firstElement","generateADL","projectOriginator","edits","frameRate","projectName","handleExportFCPX","jsonToFCPX","handleExportXML","jsonToAudition","getProgrammeScriptJson","programmeScriptJsonToText","edlsqJson","body","timecodes","fromSeconds","replace","programmeScriptJsonToTextPaperCutsOnly","handleExportJson","programmeScriptJson","programmeScriptText","JSON","stringify","handleCepExportSequence","tmpEdl","premiereCommandString","__adobe_cep__","evalScript","response","info","handleExportTxt","handleExportTxtOnyPaperCuts","handleExportDocx","a","async","programmeScriptDocx","handleExportDocxWithClipReference","timelineStartTime","resetPreview","handleDoubleClickOnProgrammeScript","latestProgrammeScript","updatePaperEdit","status","lastSaved","handleChangeInsertPointPosition","newInsertPoint","handleAdvancedSelectCheckbox","checked","handleDeleteProgrammeScriptContent","confirm","handleExportVideoPreview","sequence","programmeScriptTitle","timeNow","toLocaleString","fileName","exportVideo","res","handleExportAudioPreview","exportAudio","matchMedia","matches","Card","paddingTop","paddingBottom","this","noGutters","ButtonGroup","vertical","faPlus","cursor","marginBottom","DropdownButton","faListUl","faHeading","faMicrophoneAlt","faStickyNote","faSync","faShare","whichJsEnv","faInfoCircle","faVideo","Divider","faHeadphones","faFileAlt","faFileWord","faFileVideo","faFlask","faFileAudio","ExportWaveForm","TOOLTIP_DEPLAY_IN_MILLISECONDS","faFileCode","disabled","toLocaleTimeString","faTrash","margin","overflow","onDoubleClick","fallback","Skeleton","programmeScriptElements","Component"],"mappings":"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","file":"static/js/14.ce662e57.chunk.js","sourcesContent":["/**\n * List of CSS colors that have letters names as well as hex\n * originally from https://github.com/bahamas10/css-color-names#readme\n * TODO: filter list for colors that meets accessibility requirements and are bright enough\n * TODO: find a way to order this colours, by hue?\n */\nconst csscolors = {\n  'yellow': '#ffff00',\n  // '#ffeb3b': '#ffeb3b',\n  'greenyellow': '#adff2f',\n  'deepskyblue': '#00bfff',\n  'deeppink': '#ff1493',\n  // 'darkorange': '#ff8c00',\n  // 'aliceblue': '#f0f8ff',\n  // 'antiquewhite': '#faebd7',\n  'aqua': '#00ffff',\n  // 'azure': '#f0ffff',\n  // 'beige': '#f5f5dc',\n  // 'bisque': '#ffe4c4',\n  'black': '#000000',\n  // 'blanchedalmond': '#ffebcd',\n  'blueviolet': '#8a2be2',\n  'brown': '#a52a2a',\n  'burlywood': '#deb887',\n  'cadetblue': '#5f9ea0',\n  'chocolate': '#d2691e',\n  'coral': '#ff7f50',\n  // 'cornflowerblue': '#6495ed',\n  // 'cornsilk': '#fff8dc',\n  'crimson': '#dc143c',\n  // 'cyan': '#00ffff',\n  'darkblue': '#00008b',\n  'darkcyan': '#008b8b',\n  'darkgoldenrod': '#b8860b',\n  'darkgray': '#a9a9a9',\n  'darkgreen': '#006400',\n  // 'darkgrey': '#a9a9a9',\n  'darkkhaki': '#bdb76b',\n  'darkmagenta': '#8b008b',\n  'darkolivegreen': '#556b2f',\n  'darkorchid': '#9932cc',\n  'darkred': '#8b0000',\n  'darksalmon': '#e9967a',\n  'darkseagreen': '#8fbc8f',\n  'darkslateblue': '#483d8b',\n  'darkslategray': '#2f4f4f',\n  'darkslategrey': '#2f4f4f',\n  'darkturquoise': '#00ced1',\n  'darkviolet': '#9400d3',\n  'blue': '#0000ff',\n  'dimgray': '#696969',\n  'dimgrey': '#696969',\n  'dodgerblue': '#1e90ff',\n  'firebrick': '#b22222',\n  // 'floralwhite': '#fffaf0',\n  'forestgreen': '#228b22',\n  'fuchsia': '#ff00ff',\n  'gainsboro': '#dcdcdc',\n  // 'ghostwhite': '#f8f8ff',\n  'goldenrod': '#daa520',\n  'gold': '#ffd700',\n  'gray': '#808080',\n  'green': '#008000',\n  'grey': '#808080',\n  'honeydew': '#f0fff0',\n  'hotpink': '#ff69b4',\n  'indianred': '#cd5c5c',\n  'indigo': '#4b0082',\n  'ivory': '#fffff0',\n  'khaki': '#f0e68c',\n  'lavenderblush': '#fff0f5',\n  'lavender': '#e6e6fa',\n  'lawngreen': '#7cfc00',\n  'lemonchiffon': '#fffacd',\n  'lightblue': '#add8e6',\n  'lightcoral': '#f08080',\n  // 'lightcyan': '#e0ffff',\n  'lightgoldenrodyellow': '#fafad2',\n  'lightgray': '#d3d3d3',\n  'lightgreen': '#90ee90',\n  'lightgrey': '#d3d3d3',\n  'lightpink': '#ffb6c1',\n  'lightsalmon': '#ffa07a',\n  'lightseagreen': '#20b2aa',\n  'lightskyblue': '#87cefa',\n  'lightslategray': '#778899',\n  'lightslategrey': '#778899',\n  'lightsteelblue': '#b0c4de',\n  'lightyellow': '#ffffe0',\n  'lime': '#00ff00',\n  'chartreuse': '#7fff00',\n  'limegreen': '#32cd32',\n  'linen': '#faf0e6',\n  'magenta': '#ff00ff',\n  'maroon': '#800000',\n  'mediumblue': '#0000cd',\n  'mediumorchid': '#ba55d3',\n  'mediumpurple': '#9370db',\n  'mediumseagreen': '#3cb371',\n  'mediumslateblue': '#7b68ee',\n  'mediumspringgreen': '#00fa9a',\n  'mediumturquoise': '#48d1cc',\n  'mediumvioletred': '#c71585',\n  'midnightblue': '#191970',\n  'mintcream': '#f5fffa',\n  'mistyrose': '#ffe4e1',\n  'moccasin': '#ffe4b5',\n  // 'navajowhite': '#ffdead',\n  'navy': '#000080',\n  'oldlace': '#fdf5e6',\n  'olive': '#808000',\n  'olivedrab': '#6b8e23',\n  'orange': '#ffa500',\n  'orangered': '#ff4500',\n  'orchid': '#da70d6',\n  'palegoldenrod': '#eee8aa',\n  'palegreen': '#98fb98',\n  'paleturquoise': '#afeeee',\n  'palevioletred': '#db7093',\n  'papayawhip': '#ffefd5',\n  'peachpuff': '#ffdab9',\n  'peru': '#cd853f',\n  'pink': '#ffc0cb',\n  'plum': '#dda0dd',\n  'powderblue': '#b0e0e6',\n  'purple': '#800080',\n  'rebeccapurple': '#663399',\n  'red': '#ff0000',\n  'rosybrown': '#bc8f8f',\n  'royalblue': '#4169e1',\n  'saddlebrown': '#8b4513',\n  'salmon': '#fa8072',\n  'sandybrown': '#f4a460',\n  'seagreen': '#2e8b57',\n  'seashell': '#fff5ee',\n  'sienna': '#a0522d',\n  'silver': '#c0c0c0',\n  'skyblue': '#87ceeb',\n  'slateblue': '#6a5acd',\n  'slategray': '#708090',\n  'slategrey': '#708090',\n  'snow': '#fffafa',\n  'springgreen': '#00ff7f',\n  'steelblue': '#4682b4',\n  'tan': '#d2b48c',\n  'teal': '#008080',\n  'thistle': '#d8bfd8',\n  'tomato': '#ff6347',\n  'turquoise': '#40e0d0',\n  'violet': '#ee82ee',\n  'wheat': '#f5deb3',\n  // 'white': '#ffffff',\n  // 'whitesmoke': '#f5f5f5',\n  'yellowgreen': '#9acd32',\n  'aquamarine': '#7fffd4',\n  'mediumaquamarine': '#66cdaa'\n};\n\n/**\n * An array list of css colors\n */\nconst colorNamesList = Object.freeze(Object.keys(csscolors)\n  .splice(0, 15) // show only first 20 colours\n);\n\n/**\n * returns\n * {value: \"aliceblue\", label: \"aliceblue\", color: \"#f0f8ff\"}\n */\n// const cssColorsValueLabelColor = () => {\nconst cssColorsList = [];\nfor (var key in csscolors) {\n  cssColorsList.push({\n    value: key,\n    label:key,\n    color: csscolors[key]\n  });\n}\n// return cssColorsList;\n// };\n// const cssColorsValueLabelColor = Object.freeze(cssColorsList);\n\n/**\n * Random color\n */\nlet counter = -1;\nconst numberOfColor = colorNamesList.length;\nconst randomColor = () => {\n  if (counter < numberOfColor) {\n    counter += 1;\n  }\n  else {\n    counter = 0;\n  }\n\n  return colorNamesList[counter];\n};\n\nexport {\n  colorNamesList,\n  // cssColorsValueLabelColor,\n  randomColor\n};\n\nexport default csscolors;","import React, { useState } from 'react';\nimport { colorNamesList, randomColor } from './css-color-names.js';\nimport chroma from 'chroma-js';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { GithubPicker } from 'react-color';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faSyncAlt\n} from '@fortawesome/free-solid-svg-icons';\n\nfunction ColorOptionsFormGroup(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [color, setColor] = useState(props.color);\n\n  const handleSetColor = (color)=>{\n      console.log('handleSetColor', color);\n      setColor(color);\n      props.handleColorSelectChange(color);\n  }\n\n  const handleRandomiseColor =() => {\n    // this.setState({ color: randomColor() });\n    const tmpColor = randomColor();\n    handleSetColor(tmpColor)\n  }\n\n  const  handleColorPickerChangeComplete = (color) => {\n    // this.setState({ color: chroma(color.hex ).name() });\n    const tmpColor = chroma(color.hex).name();\n    handleSetColor(tmpColor)\n  }\n\n  const handleManualColorChange = (e) => {\n    if (e && e.target && e.target.value) {\n      const colorValue = e.target.value;\n      // this.setState({ color: chroma.valid(colorValue) ? chroma(colorValue).name() : colorValue });\n\n      const tmpColor = chroma.valid(colorValue) ? chroma(colorValue).name() : colorValue ;\n      handleSetColor(tmpColor)\n    }\n    else if (e && e.target && e.target.value === '') {\n      // this.setState({ color: '' });\n      handleSetColor('')\n    }\n  }\n\n  // const handleSave = () => {\n  //   // checks color in color picker input is valid - can be color name in letters or hex\n  //   if (chroma.valid(this.state.color)) {\n  //     // checks label name is not empty\n  //     if ( this.state.label !== '') {\n  //       this.props.onLabelSaved({\n  //         value: this.state.color,\n  //         label: this.state.label,\n  //         color: this.state.color,\n  //         description: this.state.description,\n  //         id: this.state.labelId\n  //       });\n\n  //       this.props.handleClose();\n  //     }\n  //     else {\n  //       alert('add a name to the label to be able to save');\n  //     }\n  //   }\n  //   else {\n  //     alert('choose a valid color');\n  //   }\n  // }\n\n\n\n  return (\n    \n <Form.Group controlId=\"formGroupPassword\">\n <Form.Label>Color</Form.Label>\n <Row>\n   <Col xs={ 2 } sm={ 1 } md={ 1 } lg={ 1 } xl={ 1 }>\n     <Button onClick={ handleRandomiseColor } variant=\"light\" size=\"sm\">\n       <FontAwesomeIcon icon={ faSyncAlt } />\n     </Button>\n   </Col>\n   <Col xs={ 6 } sm={ 6 } md={ 6 } lg={ 6 } xl={ 6 }>\n     <Form.Control\n       value={ color }\n       type=\"text\"\n       placeholder=\"#\"\n       onChange={ handleManualColorChange }\n     />\n   </Col>\n   <Col xs={ 2 } sm={ 2 } md={ 2 } lg={ 2 } xl={ 2 }\n     style={ {\n       backgroundColor: color,\n       border: 'solid',\n       borderWidth:'0.01em',\n       borderColor: 'grey',\n       padding: '1em'\n     } }>\n   </Col>\n </Row>\n <Row>\n   <Col xs={ 12 } sm={ 12 } md={ 12 } lg={ 12 } xl={ 12 } >\n     <Form.Text className=\"text-muted\">\n        To pick a color you can chose one at random, pick one form the list below, or type the name or hex code above.\n     </Form.Text>\n     <GithubPicker\n       width={ '100%' }\n       color={ color }\n       triangle={ 'hide' }\n       onChangeComplete={ handleColorPickerChangeComplete }\n       //   https://casesandberg.github.io/react-color/\n       colors={ colorNamesList }\n     />\n   </Col>\n </Row>\n</Form.Group>\n  );\n}\n\n\n\n\n\n\n\n\nexport default ColorOptionsFormGroup;","var map = {\n\t\"./cline.gif\": 543,\n\t\"./line.gif\": 544,\n\t\"./p2p.gif\": 545,\n\t\"./point.gif\": 546\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 542;","module.exports = __webpack_public_path__ + \"static/media/cline.c9d93ffa.gif\";","module.exports = __webpack_public_path__ + \"static/media/line.8ed85f9f.gif\";","module.exports = __webpack_public_path__ + \"static/media/p2p.8b6575a3.gif\";","module.exports = __webpack_public_path__ + \"static/media/point.08c277d3.gif\";","import React from 'react';\n\nconst Filler = (props) => {\n  return <div style={ {\n    width: `${ props.percentage }%`,\n    background: 'red',\n    height: '100%',\n    borderRadius: 'inherit'\n  } } />;\n};\n\nexport default Filler;\n","import React from 'react';\nimport Filler from './Filler';\n\nconst ProgressBar = (props) => {\n\n  return (\n    <div onClick={ props.onClick }\n      style={ {\n        position: 'relative',\n        height: '12px',\n        width: '100%',\n        opacity: '1'\n      } } >\n      <Filler percentage={ props.percentage }></Filler>\n    </div>\n\n  );\n};\nexport default ProgressBar;\n","import React, { useState, useRef, useEffect, useLayoutEffect } from 'react';\nimport ProgressBar from '../ProgressBar';\nimport PropTypes from 'prop-types';\n\nconst getPercentage = (currentTime, duration) => currentTime / duration * 100;\n\nconst VideoContextProgressBar = (props) => {\n  const ref = useRef();\n\n  const [ percentage, setPercentage ] = useState(0);\n  const [ videoContext, setVideoContext ] = useState();\n  const [ width, setWidth ] = useState(0);\n\n  const handleClick = ({ nativeEvent: { offsetX } }) => {\n    videoContext.currentTime = (offsetX / width) * videoContext.duration;\n    const percent = getPercentage(videoContext.currentTime, videoContext.duration);\n    setPercentage(percent);\n  };\n\n  useLayoutEffect(() => {\n    if (ref.current) {\n      setWidth(ref.current.offsetWidth);\n    }\n  }, [ ref ]);\n\n  useEffect(() => {\n    const fillerAnimation = () => {\n      const percent = getPercentage(videoContext.currentTime, videoContext.duration);\n      setPercentage(percent);\n      requestAnimationFrame(fillerAnimation);\n    };\n\n    setVideoContext(props.videoContext);\n\n    if (videoContext) {\n      fillerAnimation();\n    }\n  }, [ props.videoContext, videoContext ]);\n\n  return (\n    <div ref={ ref } style={ { width:'100%' } }>\n      <ProgressBar onClick={ handleClick } percentage={ percentage } />\n    </div>\n  );\n};\n\nVideoContextProgressBar.propTypes = {\n  videoContext: PropTypes.any\n};\n\nexport default VideoContextProgressBar;\n","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faPause, faStop } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\n\nconst playIcon = <FontAwesomeIcon icon={ faPlay } />;\nconst pauseIcon = <FontAwesomeIcon icon={ faPause } />;\nconst stopIcon = <FontAwesomeIcon icon={ faStop } />;\n\nconst Controls = (props) => {\n\n  const [ isPlaying, setIsPlaying ] = useState(false);\n\n  const handlePlay = () => {\n    props.handlePlay();\n    setIsPlaying(true);\n  };\n\n  const handlePause = () => {\n    props.handlePause();\n    setIsPlaying(false);\n  };\n\n  const handleStop = () => {\n    props.handleStop();\n    setIsPlaying(false);\n  };\n\n  return (\n    <>\n      <Col sm={ 6 }>\n        <Button\n          size=\"sm\"\n          block\n          variant=\"light\"\n          onClick={ isPlaying ? handlePause : handlePlay }\n        >\n          { isPlaying ? pauseIcon : playIcon }\n        </Button>\n      </Col>\n      <Col\n        sm={ 6 }\n      >\n        <Button\n          size=\"sm\"\n          block\n          variant=\"light\"\n          onClick={ handleStop }\n        >\n          { stopIcon }\n        </Button>\n      </Col>\n    </>\n  );\n};\n\nexport default Controls;\n\nControls.propTypes = {\n  handleStop: PropTypes.any,\n  handlePlay: PropTypes.any,\n  handlePause: PropTypes.any\n};\n","import React, { useState, useEffect } from 'react';\nimport VideoContextProgressBar from './VideoContextProgressBar';\nimport Controls from '../Controls';\nimport Row from 'react-bootstrap/Row';\nimport PropTypes from 'prop-types';\nimport VideoContext from 'videocontext';\n\nconst VideoContextPreview = (props) => {\n  const [ videoContext, setVideoContext ] = useState();\n\n  const updateVideoContext = (media) => {\n    media.forEach(({ type, sourceStart, start, duration, src }) => {\n      const node = videoContext[type](src, sourceStart);\n      node.startAt(start);\n      node.stopAt(start + duration);\n      node.connect(videoContext.destination);\n    });\n  };\n\n  const handleStop = () => {\n    videoContext.pause();\n    setVideoContext(vc => {\n      vc.currentTime = 0;\n\n      return vc;\n    });\n  };\n\n  useEffect(() => {\n    if (props.canvasRef && props.canvasRef.current) {\n      setVideoContext(new VideoContext(props.canvasRef.current));\n    }\n\n  }, [ props.canvasRef ]);\n\n  if (videoContext) {\n    updateVideoContext(props.playlist);\n  }\n\n  const secondsToHHMMSSFormat = (seconds) => {\n    return new Date(seconds * 1000).toISOString().substr(11, 8);\n  };\n\n  return (\n    <>\n      <Row\n        className={ 'justify-content-center' }\n        style={ { backgroundColor: 'black' } }\n      >\n        <canvas\n          ref={ props.canvasRef }\n          width={ props.width }\n          height={ props.width * 0.5625 }\n        />\n      </Row>\n      <Row\n        className={ 'justify-content-center' }\n        style={ { backgroundColor: 'lightgrey' } }\n      >\n        <VideoContextProgressBar videoContext={ videoContext }/>\n      </Row>\n      <Row style={ { marginTop: '0.4em' } }>\n        <Controls\n          handlePlay={ videoContext ? () => videoContext.play() : () => console.log('handlePlay') }\n          handlePause={ videoContext ? () => videoContext.pause() : () => console.log('handlePause') }\n          handleStop={ videoContext ? () => handleStop() : () => console.log('handleStop') }\n        />\n      </Row>\n      <Row className={ 'justify-content-center' }>\n        Total duration: {videoContext ? secondsToHHMMSSFormat(videoContext.duration) : '00:00:00'}\n      </Row>\n    </>\n  );\n};\n\nVideoContextPreview.propTypes = {\n  canvasRef: PropTypes.any,\n  playlist: PropTypes.array,\n  videoContext: PropTypes.any,\n  width: PropTypes.any\n};\n\nVideoContextPreview.defaultProps = {\n  playlist: []\n};\n\nexport default VideoContextPreview;\n","/* eslint-disable react/prop-types */\nimport React, { useRef } from 'react';\nimport VideoContextPreview from './VideoContextPreview';\nimport PropTypes from 'prop-types';\n\nconst PreviewCanvas = props => {\n  const canvasRef = useRef();\n\n  return (\n    <VideoContextPreview\n      width={ props.width }\n      canvasRef={ canvasRef }\n      playlist={ props.playlist }\n    />\n  );\n};\n\nPreviewCanvas.propTypes = {\n  playlist: PropTypes.array,\n  width: PropTypes.number\n};\n\nPreviewCanvas.defaultProps = {\n  playlist: []\n};\n\nexport default PreviewCanvas;\n","import React from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\nfunction ExportMenuItem({ onClick, title, text, tootlipDelay }) {\n  return (\n    <OverlayTrigger placement={'left'} delay={tootlipDelay} overlay={<Tooltip>{title}</Tooltip>}>\n      <Dropdown.Item\n        variant=\"light\"\n        eventKey=\"1\"\n        onClick={onClick}\n        // title={title}\n      >\n        {text}\n      </Dropdown.Item>\n    </OverlayTrigger>\n  );\n}\n\nexport default ExportMenuItem;\n","/**\n * Gets the start and end time for a range of words elements selected by a user on the page\n * https://github.com/OpenNewsLabs/autoEdit_2/blob/master/lib/app/views/transcription_view.js#L47\n *\n * TODO: check in chrome, firefox, and safari?\n */\n\nfunction parseWordElDataset(wordEl) {\n\n  return {\n    start: parseFloat(wordEl.dataset.start),\n    end: parseFloat(wordEl.dataset.end),\n    // you could also get the word from wordEl.dataset.text\n    // but the word there is lowercase and without punctuation coz is used\n    // for the search  functionality so using innerText\n    // to preserve punctuation and capitalization\n    text: wordEl.innerText,\n    speaker: wordEl.dataset.speaker,\n    transcriptId: wordEl.dataset.transcriptId\n  };\n}\n\n/**\n * TODO: at the moment only works for selections within a paragraph\n * @param {*} e - browser event\n * @returns - an object with start and end time - eg {stat: \"23.03\", end: \"39.61\"}\n */\nfunction getDataFromUserWordsSelection(e) {\n  // https://stackoverflow.com/questions/11300590/how-to-captured-selected-text-range-in-ios-after-text-selection-expansion\n  // https://jsfiddle.net/JasonMore/gWZfb/\n  if (!window.getSelection().isCollapsed) {\n    const selectedRange = window.getSelection().getRangeAt(0).cloneContents();\n\n    // Seems like this work no matter if the selection is made left to right\n    // or right to left form the user\n    const words = selectedRange.querySelectorAll('.words');\n\n    if (words.length !== 0) {\n\n      return {\n        start: parseFloat(words[0].dataset.start),\n        end: parseFloat(words[words.length - 1].dataset.end),\n        transcriptId: words[0].dataset.transcriptId,\n        speaker: words[0].dataset.speaker,\n        // words: words\n        words: Array.from(words).map((w) => {return parseWordElDataset(w);})\n      };\n    }\n    else {\n      // handles selection of single word\n      // if selected a single word - then selection is on text element\n      // and we want to get to parent element, span with words class\n      const word = window.getSelection().anchorNode.parentElement;\n      if (word.className === 'words') {\n        return {\n          start: parseFloat(word.dataset.start),\n          end: parseFloat(word.dataset.end),\n          transcriptId: word.dataset.transcriptId,\n          speaker: word.dataset.speaker,\n          words: [ parseWordElDataset(word) ]\n        };\n      }\n\n      return false;\n    }\n  }\n\n  return false;\n}\n\nexport default getDataFromUserWordsSelection;","//  if the speaker of all the words is the same we can assume is one paragraph\nconst isOneParagraph = words => {\n  const firstword = words[0];\n\n  const result = words.filter(word => {\n    return word.speaker !== firstword.speaker;\n  });\n\n  return result.length === 0;\n};\n\n/**\n * helper function to determine if an element is last one in a list\n * based on the index\n */\nconst isLastElement = (elementIndex, list) => {\n  return elementIndex === (list.length - 1);\n};\nconst divideWordsSelectionsIntoParagraphs = words => {\n  if (isOneParagraph(words)) {\n    return words;\n  }\n  // initialising previous word speaker with speaker of first word\n  let previousWordSpeaker = words[0].speaker;\n  let currentParagraph = [];\n  const paragraphsResult = [];\n\n  words.forEach((word, index) => {\n    if (word.speaker === previousWordSpeaker) {\n      currentParagraph.push(word);\n    } else {\n      paragraphsResult.push(currentParagraph);\n      currentParagraph = [];\n      // if (isLastElement(index, words)) {\n      currentParagraph.push(word);\n      // }\n\n      previousWordSpeaker = word.speaker;\n    }\n\n    // Handling last paragraph\n    if (isLastElement(index, words)) {\n      // currentParagraph.push(word);\n      paragraphsResult.push(currentParagraph);\n    }\n  });\n\n  return paragraphsResult;\n  // return paragraphsResult.reverse();\n};\n\n// divideWordsSelectionsIntoParagraphs(result.words);\nexport { divideWordsSelectionsIntoParagraphs, isOneParagraph };\n","import { Document, HeadingLevel, AlignmentType, Paragraph, TextRun, Packer } from 'docx';\nimport { shortTimecode } from 'slate-transcript-editor';\n\nconst programmeScriptJsonToDocx = (edlJson, isWithClipReference) => {\n  console.log('edlJson', edlJson.title);\n  const transcriptTitle = edlJson.title;\n\n  const doc = new Document({ creator: 'Test', description: 'Test Description', title: transcriptTitle });\n\n  // add body\n  const sections = [];\n  edlJson.events.forEach(event => {\n    if (event.type === 'title') {\n      sections.push(\n        new Paragraph({\n          text: event.text,\n          heading: HeadingLevel.HEADING_1,\n          spacing: {\n            after: 200,\n          },\n        })\n      );\n    } else if (event.type === 'voice-over') {\n      sections.push(\n        new Paragraph({\n          children: [\n            new TextRun({\n              text: `Voice Over:\\t`,\n              italics: false,\n              bold: true,\n            }),\n            new TextRun({\n              text: `${event.text}`,\n            }),\n          ],\n          spacing: {\n            after: 200,\n          },\n        })\n      );\n    } else if (event.type === 'note') {\n      sections.push(\n        new Paragraph({\n          children: [new TextRun({ text: `Notes:\\t`, italics: true, bold: true }), new TextRun({ text: `${event.text}`, italics: true })],\n          spacing: {\n            after: 200,\n          },\n        })\n      );\n    } else if (event.type === 'paper-cut') {\n      const text = event.words\n        .map(word => {\n          return word.text;\n        })\n        .join(' ');\n\n      sections.push(\n        new Paragraph({\n          children: [\n            new TextRun({\n              text: `${event.speaker}\\t`,\n              bold: true,\n              allCaps: true,\n            }),\n            new TextRun({\n              text: `${text}`,\n            }),\n          ],\n          spacing: {\n            after: 100,\n          },\n        })\n      );\n\n      if (isWithClipReference) {\n        sections.push(\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: `${event.clipName}\\t [${shortTimecode(event.start)} - ${shortTimecode(event.end)}]`,\n                size: 18,\n              }),\n            ],\n            spacing: {\n              after: 200,\n            },\n          })\n        );\n      }\n    }\n\n    return null;\n  });\n\n  // Add transcription title\n  doc.addSection({\n    properties: {},\n    children: [new Paragraph({ text: transcriptTitle, heading: HeadingLevel.TITLE, alignment: AlignmentType.CENTER }), ...sections],\n  });\n\n  return new Promise((resolve, reject) => {\n    return Packer.toBlob(doc)\n      .then(blob => {\n        console.log(blob);\n        resolve(blob);\n        console.log('Document created successfully');\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport default programmeScriptJsonToDocx;\n","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Image from 'react-bootstrap/Image';\nimport ColorOptionsFormGroup from '../../Transcripts/LabelsList/ColorOptionsFormGroup.js'\n\n\nfunction Example(props) {\n    const [show, setShow] = useState(false);\n    const [waveFormMode, setWaveFormMode] = useState('cline');\n    const [waveFormColor, setWaveFormColor] = useState('blue');\n\n    const handleClose = () => setShow(false);\n    const  handleSubmit = () =>{\n        props.handleExportAudioPreviewWithVideoWaveform({waveFormMode, waveFormColor});\n        setShow(false)\n    };\n    const handleShow = () => setShow(true);\n\n\n   const handleColorSelectChange = color => {\n        // this.setState({ color: color });\n        console.log('handleColorSelectChange', color)\n        setWaveFormColor(color)\n  };\n\n \n  const handleSetWaveFormMode = (e)=>{\n    const mode = e.target.value;\n      console.log('handleSetWaveFormMode', mode)\n\n    setWaveFormMode(mode);\n  }\n  \n    return (\n      <>\n        <Dropdown.Item \n            variant=\"light\" \n            eventKey=\"1\"\n            onClick={handleShow}\n            // title={title}\n            >\n            {props.text}\n        </Dropdown.Item>\n\n        {/* <ExportMenuItem\n            tootlipDelay={props.TOOLTIP_DEPLAY_IN_MILLISECONDS}\n            onClick={ ()=>{props.handleExportAudioPreviewWithVideoWaveform({waveFormMode:'cline'}) }}\n            title={props.title}\n            text={props.text}\n        />\n   */}\n        <Modal show={show} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Export audio as video waveform</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n\n          <Form.Group controlId=\"exampleForm.ControlSelect1\">\n            <Form.Label>Select waveform style</Form.Label>\n            <Form.Control as=\"select\" onChange={handleSetWaveFormMode}>\n                <option value=\"cline\">cline</option>\n                <option value=\"point\">point</option>\n                <option value=\"p2p\">p2p</option>\n                <option value=\"line\">line</option>\n            </Form.Control>\n         </Form.Group>\n         <Image src={require(`./${waveFormMode}.gif`)} alt=\"loading...\" fluid/>\n          <ColorOptionsFormGroup\n          color={waveFormColor}\n          handleColorSelectChange={handleColorSelectChange}\n          />\n\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" onClick={handleSubmit}>\n              Submit\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\nexport default Example;","import React, { Component, Suspense } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport cuid from 'cuid';\nimport Card from 'react-bootstrap/Card';\nimport PreviewCanvas from './PreviewCanvas2/index.js';\nimport Button from 'react-bootstrap/Button';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport EDL from '@pietrop/edl-composer';\nimport generateADL from '@pietrop/aes31-adl-composer';\nimport jsonToFCPX from '@pietrop/fcpx-xml-composer';\nimport jsonToAudition from 'audition-xml-composer';\nimport downloadjs from 'downloadjs';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faShare,\n  faMicrophoneAlt,\n  faStickyNote,\n  faHeading,\n  faPlus,\n  faSync,\n  faInfoCircle,\n  faTrash,\n  faListUl,\n  faFileCode,\n  faFileVideo,\n  faFileAudio,\n  faHeadphones,\n  faVideo,\n  faFileWord,\n  faFileAlt,\n  faFlask,\n} from '@fortawesome/free-solid-svg-icons';\nimport timecodes from 'node-timecodes';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nimport ExportMenuItem from './ExportMenuItem';\nimport getDataFromUserWordsSelection from './get-data-from-user-selection.js';\nimport { divideWordsSelectionsIntoParagraphs, isOneParagraph } from './divide-words-selections-into-paragraphs/index.js';\nimport ApiWrapper from '../../../../ApiWrapper/index.js';\nimport whichJsEnv from '../../../../Util/which-js-env';\nimport programmeScriptJsonToDocx from './programme-script-json-to-docx/index.js';\nimport ExportWaveForm from './ExportWaveForm';\nconst ProgrammeScript = React.lazy(() => import('./ProgrammeScript.js'));\n\nconst TOOLTIP_DEPLAY_IN_MILLISECONDS = 3000;\nconst defaultReelName = 'NA';\nconst defaultFps = 25;\nconst defaultTimecodeOffset = '00:00:00:00';\nconst defaultSampleRate = '16000';\nconst INSERT_POINT_ELEMENT = { type: 'insert-point', text: 'Insert Point to add selection' };\n\nclass ProgramScript extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lastSaved: new Date(),\n      programmeScript: null,\n      resetPreview: false,\n      isAdvancedSelect: false,\n      // demo content\n      playlist: [\n        // start - is relative to timeline\n        // duration - of clip in playlist\n        // sourceStart - time from start of clip in playlist\n        // { type:'video', start:0, sourceStart: 30, duration:10, src:'https://download.ted.com/talks/MorganVague_2018X.mp4' },\n        // { type:'video', start:10, sourceStart: 40, duration:10, src:'https://download.ted.com/talks/IvanPoupyrev_2019.mp4' },\n        // { type:'video', start:20, sourceStart: 50, duration:10, src:'https://download.ted.com/talks/KateDarling_2018S-950k.mp4' },\n      ],\n    };\n  }\n\n  mouseUpListener = () => {\n    // makign sure mouse up event is also associated with a selection\n    if (window.getSelection || document.selection) {\n      const result = getDataFromUserWordsSelection();\n      if (result) {\n        this.setState({ tmpSelection: result });\n        // if advanced select is on, copy over to programme scfript\n        if (this.state.isAdvancedSelect) {\n          this.handleAddTranscriptSelectionToProgrammeScript();\n        }\n      }\n    }\n  };\n\n  componentDidMount = () => {\n    ApiWrapper.getPaperEdit(this.props.projectId, this.props.papereditId).then(json => {\n      const programmeScript = json.programmeScript;\n      // Adding an insert point at the end of the list\n      programmeScript.elements.push(INSERT_POINT_ELEMENT);\n      this.setState({\n        programmeScript: programmeScript,\n      });\n    });\n    // listening for word selections in transcripts\n    // to save those tmp selection to enable to\n    // use contextual menu in programme script to\n    // paste those selections in the programme script\n    document.addEventListener('mouseup', this.mouseUpListener);\n  };\n  componentWillUnmount = () => {\n    // removing selection listener\n    try {\n      document.removeEventListener('mouseup', this.mouseUpListener);\n    } catch (error) {\n      console.error('error removing listener mouseup', error);\n    }\n  };\n\n  // TODO: save to server\n  handleProgrammeScriptOrderChange = list => {\n    this.setState(\n      ({ programmeScript }) => {\n        programmeScript.elements = list;\n\n        return {\n          programmeScript: programmeScript,\n        };\n      },\n      () => {\n        this.handleSaveProgrammeScript();\n        this.handleUpdatePreview();\n      }\n    );\n  };\n\n  // TODO: save to server\n  handleDeleteProgrammeScriptElement = i => {\n    // TODO: add a prompt, like are you shure you want to delete, confirm etc..?\n    this.setState(\n      ({ programmeScript }) => {\n        const index = i;\n        const list = programmeScript.elements;\n        list.splice(index, 1);\n        programmeScript.elements = list;\n\n        return {\n          programmeScript: programmeScript,\n        };\n      },\n      () => {\n        this.handleSaveProgrammeScript();\n        this.handleUpdatePreview();\n      }\n    );\n  };\n\n  handleEditProgrammeScriptElement = i => {\n    const { programmeScript } = this.state;\n    const elements = programmeScript.elements;\n    const currentElement = elements[i];\n    const newText = prompt('Edit', currentElement.text);\n    if (newText) {\n      currentElement.text = newText;\n      elements[i] = currentElement;\n      programmeScript.elements = elements;\n      // TODO: save to server\n      this.setState(\n        {\n          programmeScript: programmeScript,\n        },\n        () => {\n          this.handleSaveProgrammeScript();\n          // For now programme script elements other\n          // than paper cuts don't show in preview canvas\n          // so commenting this out for now\n          // this.handleUpdatePreview();\n        }\n      );\n    }\n  };\n\n  handleAddTranscriptElementToProgrammeScript = (elementType, indexNumber) => {\n    console.log('handleAddTranscriptElementToProgrammeScript', elementType, indexNumber);\n    const { programmeScript } = this.state;\n    const elements = this.state.programmeScript.elements;\n    // TODO: refactor - with helper functions\n    if (elementType === 'title' || elementType === 'note' || elementType === 'voice-over') {\n      const text = prompt('Add some text for a section title', 'Some place holder text');\n      if (text) {\n        let indexOfInsertPoint = 0;\n        if (indexNumber || indexNumber === 0) {\n          indexOfInsertPoint = indexNumber + 1;\n        } else {\n          indexOfInsertPoint = this.getIndexPositionOfInsertPoint();\n        }\n        const newElement = {\n          id: cuid(),\n          index: elements.length,\n          type: elementType,\n          text: text,\n        };\n\n        elements.splice(indexOfInsertPoint, 0, newElement);\n        programmeScript.elements = elements;\n        // TODO: save to server\n        this.setState(\n          {\n            programmeScript: programmeScript,\n          },\n          () => {\n            this.handleSaveProgrammeScript();\n          }\n        );\n      }\n    }\n  };\n\n  getIndexPositionOfInsertPoint = () => {\n    const { programmeScript } = this.state;\n    const elements = programmeScript.elements;\n    // find insert point in list,\n    const insertPointElement = elements.find(el => {\n      return el.type === 'insert-point';\n    });\n    // get insertpoint index\n    const indexOfInsertPoint = elements.indexOf(insertPointElement);\n\n    return indexOfInsertPoint;\n  };\n\n  handleAddTranscriptSelectionToProgrammeScriptTmpSave = indexNumber => {\n    // getting results of word selection from tmpSelection in state\n    // tmpSelection in populated via the on mouse app selection listener\n    // initialised in componentDidMount\n    const result = this.state.tmpSelection;\n    // extra validation to make sure it doesn't accidentally try to paste paper-cuts\n    // if the user selects those words\n    if (result && result.transcriptId && result.speaker) {\n      // TODO: if there's just one speaker in selection do following\n      // if it's multiple split list of words into multiple groups\n      // and add a papercut for each to the programme script\n      const { programmeScript } = this.state;\n      const elements = programmeScript.elements;\n      // TODO: insert at insert point\n      let indexOfInsertPoint = 0;\n      if (indexNumber || indexNumber === 0) {\n        indexOfInsertPoint = indexNumber + 1;\n      } else {\n        indexOfInsertPoint = this.getIndexPositionOfInsertPoint();\n      }\n      if (isOneParagraph(result.words)) {\n        // create new element\n        // TODO: Create new element could be refactored into helper function\n        const newElement = {\n          id: cuid(),\n          index: elements.length,\n          type: 'paper-cut',\n          start: result.start,\n          end: result.end,\n          speaker: result.speaker,\n          words: result.words,\n          transcriptId: result.transcriptId,\n          labelId: [],\n        };\n        // add element just above of insert point\n        elements.splice(indexOfInsertPoint, 0, newElement);\n        programmeScript.elements = elements;\n      } else {\n        const paragraphs = divideWordsSelectionsIntoParagraphs(result.words);\n        paragraphs.reverse().forEach(paragraph => {\n          const newElement = {\n            id: cuid(),\n            index: elements.length,\n            type: 'paper-cut',\n            start: paragraph[0].start,\n            end: paragraph[paragraph.length - 1].end,\n            speaker: paragraph[0].speaker,\n            words: paragraph,\n            transcriptId: paragraph[0].transcriptId,\n            // TODO: ignoring labels for now\n            labelId: [],\n          };\n          // add element just above of insert point\n          elements.splice(indexOfInsertPoint, 0, newElement);\n          programmeScript.elements = elements;\n        });\n      }\n      // TODO: save to server\n      this.setState(\n        {\n          programmeScript: programmeScript,\n        },\n        () => {\n          this.handleSaveProgrammeScript();\n          this.handleUpdatePreview();\n        }\n      );\n    } else {\n      alert('Select some text in the transcript to add to the programme script');\n    }\n  };\n\n  // TODO: save to server\n  // TODO: needs to handle when selection spans across multiple paragraphs\n  handleAddTranscriptSelectionToProgrammeScript = (e, indexNumber) => {\n    const result = getDataFromUserWordsSelection();\n    if (result) {\n      // TODO: if there's just one speaker in selection do following\n      // if it's multiple split list of words into multiple groups\n      // and add a papercut for each to the programme script\n      const { programmeScript } = this.state;\n      const elements = programmeScript.elements;\n      // insert at insert point\n      let indexOfInsertPoint = 0;\n      if (indexNumber || indexNumber === 0) {\n        indexOfInsertPoint = indexNumber + 1;\n      } else {\n        indexOfInsertPoint = this.getIndexPositionOfInsertPoint();\n      }\n      if (isOneParagraph(result.words)) {\n        // create new element\n        // TODO: Create new element could be refactored into helper function\n        const newElement = {\n          id: cuid(),\n          index: elements.length,\n          type: 'paper-cut',\n          start: result.start,\n          end: result.end,\n          speaker: result.speaker,\n          words: result.words,\n          transcriptId: result.transcriptId,\n          labelId: [],\n        };\n        // add element just above of insert point\n        elements.splice(indexOfInsertPoint, 0, newElement);\n        programmeScript.elements = elements;\n      } else {\n        const paragraphs = divideWordsSelectionsIntoParagraphs(result.words);\n        paragraphs.reverse().forEach(paragraph => {\n          const newElement = {\n            id: cuid(),\n            index: elements.length,\n            type: 'paper-cut',\n            start: paragraph[0].start,\n            end: paragraph[paragraph.length - 1].end,\n            speaker: paragraph[0].speaker,\n            words: paragraph,\n            transcriptId: paragraph[0].transcriptId,\n            // TODO: ignoring labels for now\n            labelId: [],\n          };\n          // add element just above of insert point\n          elements.splice(indexOfInsertPoint, 0, newElement);\n          programmeScript.elements = elements;\n        });\n      }\n      // TODO: save to server\n      this.setState(\n        {\n          programmeScript: programmeScript,\n        },\n        () => {\n          this.handleSaveProgrammeScript();\n          this.handleUpdatePreview();\n          // clearing the selection to avoid bugs\n          window.getSelection().collapse(document, 0);\n        }\n      );\n    } else {\n      alert('Select some text in the transcript to add to the programme script');\n    }\n  };\n\n  /**\n   * Helper function to create json EDL for other EDL/ADL/FPCX export\n   */\n  getSequenceJsonEDL = () => {\n    const edlSq = {\n      title: this.state.programmeScript.title,\n      events: [],\n    };\n\n    const programmeScriptPaperCuts = this.state.programmeScript.elements\n      .map(element => {\n        if (element.type === 'paper-cut') {\n          // Get clipName for current transcript\n          const currentTranscript = this.props.transcripts.find(tr => {\n            return tr.id === element.transcriptId;\n          });\n\n          let mediaFps = defaultFps;\n          if (currentTranscript.metadata && currentTranscript.metadata.fps && currentTranscript.metadata.fps !== 'NA') {\n            mediaFps = currentTranscript.metadata.fps;\n          }\n\n          const result = {\n            startTime: element.start,\n            endTime: element.end,\n            reelName: currentTranscript.metadata ? currentTranscript.metadata.reelName : defaultReelName,\n            clipName: `${currentTranscript.clipName}`,\n            // TODO: frameRate should be pulled from the clips in the sequence\n            // Changing to 24 fps because that is the frame rate of the ted talk examples from youtube\n            // but again frameRate should not be hard coded\n            fps: mediaFps,\n            // TODO: if there is an offset this should added here, for now hard coding 0\n            offset: currentTranscript.metadata ? currentTranscript.metadata.timecode : defaultTimecodeOffset,\n            sampleRate: currentTranscript.metadata ? currentTranscript.metadata.sampleRate : defaultSampleRate,\n          };\n\n          return result;\n        }\n\n        return null;\n      })\n      .filter(el => {\n        return el !== null;\n      });\n    // adding ids to EDL\n    const programmeScriptPaperCutsWithId = programmeScriptPaperCuts.map((el, index) => {\n      el.id = index + 1;\n\n      return el;\n    });\n    edlSq.events.push(...programmeScriptPaperCutsWithId);\n\n    return edlSq;\n  };\n\n  getSequenceJsonForFfmpegRemix = () => {\n    const programmeScriptPaperCuts = this.state.programmeScript.elements\n      .map(element => {\n        if (element.type === 'paper-cut') {\n          console.log(element);\n          // Get clipName for current transcript\n          const currentTranscript = this.props.transcripts.find(tr => {\n            return tr.id === element.transcriptId;\n          });\n          // TODO: add a check that exports only if urls all contain mp4s, if not cannot send to ffmpeg-remix(?)\n          const result = {\n            start: parseFloat(element.start),\n            end: parseFloat(element.end),\n            // duration: element.end-element.start,\n            source: `${currentTranscript.url}`,\n          };\n          return result;\n        }\n        return null;\n      })\n      .filter(el => {\n        return el !== null;\n      });\n\n    return programmeScriptPaperCuts;\n  };\n\n  // https://www.npmjs.com/package/downloadjs\n  // https://www.npmjs.com/package/@pietrop/edl-composer\n  handleExportEDL = () => {\n    const edlSq = this.getSequenceJsonEDL();\n    const edl = new EDL(edlSq);\n    downloadjs(edl.compose(), `${this.state.programmeScript.title}.edl`, 'text/plain');\n  };\n\n  handleExportADL = () => {\n    // alert('this function has not been implemented yet');\n    const edlSq = this.getSequenceJsonEDL();\n    const firstElement = edlSq.events[0];\n    let mediaFps = defaultFps;\n    if (firstElement.fps && firstElement.fps !== 'NA') {\n      mediaFps = firstElement.fps;\n    }\n    const result = generateADL({\n      projectOriginator: 'Digital Paper Edit',\n      // TODO: it be good to change sequence for the ADL to be same schema\n      // as the one for EDL and FCPX - for now just adjusting\n      edits: edlSq.events.map(event => {\n        return {\n          start: event.startTime,\n          end: event.endTime,\n          clipName: event.clipName,\n          // TODO: could add a label if present\n          label: '',\n        };\n      }),\n      sampleRate: firstElement.sampleRate,\n      frameRate: mediaFps,\n      projectName: edlSq.title,\n    });\n    downloadjs(result, `${this.state.programmeScript.title}.adl`, 'text/plain');\n  };\n\n  handleExportFCPX = () => {\n    // alert('this function has not been implemented yet');\n    const edlSq = this.getSequenceJsonEDL();\n    const result = jsonToFCPX(edlSq);\n    downloadjs(result, `${this.state.programmeScript.title}.fcpxml`, 'text/plain');\n  };\n\n  handleExportXML = () => {\n    const edlSq = this.getSequenceJsonEDL();\n    const result = jsonToAudition(edlSq);\n    downloadjs(result, `${this.state.programmeScript.title}.xml`, 'text/plain');\n  };\n\n  getProgrammeScriptJson = () => {\n    const edlSq = {\n      title: this.state.programmeScript.title,\n      events: [],\n    };\n\n    const programmeScriptPaperCuts = this.state.programmeScript.elements\n      .map(element => {\n        if (element.type === 'paper-cut') {\n          // Get clipName for current transcript\n          const currentTranscript = this.props.transcripts.find(tr => {\n            return tr.id === element.transcriptId;\n          });\n\n          let mediaFps = defaultFps;\n          if (currentTranscript.metadata && currentTranscript.metadata.fps && currentTranscript.metadata.fps !== 'NA') {\n            mediaFps = currentTranscript.metadata.fps;\n          }\n          // TODO: need to find a way to escape text containing ' in word text attribute\n          // const words = element.words.map((word) => {\n          //   word.text = word.text.replace(/'/g,\"\\'\");\n          //   return word;\n          // })\n\n          const result = {\n            ...element,\n            // words,\n            // TODO: this is point to the proxy preview locally on the user's computer\n            src: currentTranscript.url,\n            startTime: element.start,\n            endTime: element.end,\n            reelName: currentTranscript.metadata ? currentTranscript.metadata.reelName : defaultReelName,\n            clipName: `${currentTranscript.clipName}`,\n            // TODO: frameRate should be pulled from the clips in the sequence\n            // Changing to 24 fps because that is the frame rate of the ted talk examples from youtube\n            // but again frameRate should not be hard coded\n            fps: mediaFps,\n            sampleRate: currentTranscript.metadata ? currentTranscript.metadata.sampleRate : defaultSampleRate,\n            offset: currentTranscript.metadata ? currentTranscript.metadata.timecode : defaultTimecodeOffset,\n          };\n\n          return result;\n        } else {\n          return element;\n        }\n      })\n      .filter(el => {\n        return el !== null;\n      });\n    // adding ids to EDL\n    const programmeScriptPaperCutsWithId = programmeScriptPaperCuts.map((el, index) => {\n      el.id = index + 1;\n\n      return el;\n    });\n    edlSq.events.push(...programmeScriptPaperCutsWithId);\n\n    return edlSq;\n  };\n\n  programmeScriptJsonToText = edlsqJson => {\n    const title = `# ${edlsqJson.title}\\n\\n`;\n    const body = edlsqJson.events.map(event => {\n      if (event.type === 'title') {\n        return `## ${event.text}`;\n      } else if (event.type === 'voice-over') {\n        return `_${event.text}_`;\n      } else if (event.type === 'note') {\n        return `[ ${event.text}]`;\n      } else if (event.type === 'paper-cut') {\n        // need to escape ' otherwise Premiere.jsx chockes\n        return `${timecodes.fromSeconds(event.startTime)}\\t${timecodes.fromSeconds(event.endTime)}\\t${event.speaker}\\t-\\t${\n          event.clipName\n        }     \\n${event.words\n          .map(word => {\n            return word.text.replace(/'/, \"'\");\n          })\n          .join(' ')}`;\n      }\n\n      return null;\n    });\n\n    return `${title}${body.join('\\n\\n')}`;\n  };\n\n  programmeScriptJsonToTextPaperCutsOnly = edlsqJson => {\n    const body = edlsqJson.events.map(event => {\n      if (event.type === 'paper-cut') {\n        // need to escape ' otherwise Premiere.jsx chockes\n        return `${event.words\n          .map(word => {\n            return word.text.replace(/'/, \"'\");\n          })\n          .join(' ')}`;\n      }\n\n      return null;\n    });\n\n    return `${body.filter(e => e !== null).join('\\n\\n')}`;\n  };\n\n  handleExportJson = () => {\n    const programmeScriptJson = this.getProgrammeScriptJson();\n    const programmeScriptText = JSON.stringify(programmeScriptJson, null, 2);\n    downloadjs(programmeScriptText, `${this.state.programmeScript.title}.json`, 'text/plain');\n  };\n\n  handleCepExportSequence = () => {\n    const programmeScriptJson = this.getProgrammeScriptJson();\n\n    const paperCuts = programmeScriptJson.events.filter(el => {\n      return el.type === 'paper-cut';\n    });\n    // not quier sure how to escapte  ' in word text attribute, so since it's not needed for premiere export, removing the words\n    const paperCutsWithoutWords = paperCuts.map(el => {\n      delete el.words;\n      return el;\n    });\n    // TODO: need to remove\n    const tmpEdl = {\n      edlJson: {\n        events: paperCutsWithoutWords,\n        title: this.state.programmeScript.title,\n      },\n    };\n    const premiereCommandString = \"$._PPP.create_sequence_from_paper_edit('\" + JSON.stringify(tmpEdl) + \"')\";\n    window.__adobe_cep__.evalScript(premiereCommandString, function(response) {\n      // done\n      console.info('done exporting sequence');\n    });\n  };\n\n  handleExportTxt = () => {\n    const programmeScriptJson = this.getProgrammeScriptJson();\n    const programmeScriptText = this.programmeScriptJsonToText(programmeScriptJson);\n    downloadjs(programmeScriptText, `${this.state.programmeScript.title}.txt`, 'text/plain');\n  };\n\n  handleExportTxtOnyPaperCuts = () => {\n    const programmeScriptJson = this.getProgrammeScriptJson();\n    const programmeScriptText = this.programmeScriptJsonToTextPaperCutsOnly(programmeScriptJson);\n    downloadjs(programmeScriptText, `${this.state.programmeScript.title}.txt`, 'text/plain');\n  };\n\n  handleExportDocx = async () => {\n    const programmeScriptJson = this.getProgrammeScriptJson();\n    const isWithClipReference = false;\n    const programmeScriptDocx = await programmeScriptJsonToDocx(programmeScriptJson, isWithClipReference);\n    downloadjs(programmeScriptDocx, `${this.state.programmeScript.title}.docx`, 'text/docx');\n  };\n\n  handleExportDocxWithClipReference = async () => {\n    const programmeScriptJson = this.getProgrammeScriptJson();\n    const isWithClipReference = true;\n    const programmeScriptDocx = await programmeScriptJsonToDocx(programmeScriptJson, isWithClipReference);\n    downloadjs(programmeScriptDocx, `${this.state.programmeScript.title}.docx`, 'text/docx');\n  };\n\n  handleUpdatePreview = () => {\n    let timelineStartTime = 0;\n    // playlist elements for  previe canvas\n    // { type:'video', start:0, sourceStart: 30, duration:10, src:'https://download.ted.com/talks/MorganVague_2018X.mp4' },\n    const playlist = this.state.programmeScript.elements\n      .map(element => {\n        if (element.type === 'paper-cut') {\n          // Get clipName for current transcript\n          const currentTranscript = this.props.transcripts.find(tr => {\n            return tr.id === element.transcriptId;\n          });\n          const duration = element.end - element.start;\n          // TODO: handle audio only type (eg for radio), get from transcript json?\n          const result = {\n            type: 'video',\n            start: timelineStartTime,\n            sourceStart: element.start,\n            duration: duration,\n            src: currentTranscript.url,\n          };\n\n          timelineStartTime += duration;\n\n          return result;\n        }\n\n        return null;\n      })\n      .filter(el => {\n        return el !== null;\n      });\n    // Workaround to mound and unmoun the `PreviewCanvas` component\n    // to update the playlist\n    this.setState(\n      {\n        resetPreview: true,\n      },\n      () => {\n        this.setState({\n          resetPreview: false,\n          playlist: playlist,\n        });\n      }\n    );\n    this.setState({\n      playlist: playlist,\n    });\n  };\n\n  handleDoubleClickOnProgrammeScript = e => {\n    if (e.target.className === 'words') {\n      // const wordCurrentTime = e.target.dataset.start;\n      // TODO: set current time in preview canvas\n      // Video context probably needs more info like, which clip/track in the sequence?\n      // investigate how to set currentTime in video context\n    }\n  };\n\n  handleSaveProgrammeScript = () => {\n    const { programmeScript } = this.state;\n    // cloning programmeScript to avoid overriding original\n    const latestProgrammeScript = { ...programmeScript };\n    if (latestProgrammeScript) {\n      const elements = [...latestProgrammeScript.elements];\n      // finding an removing insert point before saving to server\n      // find insert point in list,\n      const insertPointElement = elements.find(el => {\n        return el.type === 'insert-point';\n      });\n      if (insertPointElement) {\n        // get insertpoint index\n        const indexOfInsertPoint = elements.indexOf(insertPointElement);\n        elements.splice(indexOfInsertPoint, 1);\n      }\n\n      latestProgrammeScript.elements = elements;\n      ApiWrapper.updatePaperEdit(this.props.projectId, this.props.papereditId, latestProgrammeScript).then(json => {\n        if (json.status === 'ok') {\n          this.setState({ lastSaved: new Date() });\n        }\n      });\n    }\n  };\n\n  // TODO:\n  handleChangeInsertPointPosition = indexNumber => {\n    const { programmeScript } = this.state;\n    const latestProgrammeScript = { ...programmeScript };\n    // insert new programme script\n    // remove insert point from old programme script (eg index different from new one)\n    // save programme script\n    if (latestProgrammeScript) {\n      const elements = [...latestProgrammeScript.elements];\n      // finding an removing insert point before saving to server\n      // find insert point in list,\n      const insertPointElement = elements.find(el => {\n        return el.type === 'insert-point';\n      });\n      // add new insert point\n      const newInsertPoint = { ...INSERT_POINT_ELEMENT };\n      elements.splice(indexNumber + 1, 0, newInsertPoint);\n      // remove previous  insert point\n      if (insertPointElement) {\n        // get insertpoint index\n        const indexOfInsertPoint = elements.indexOf(insertPointElement);\n        elements.splice(indexOfInsertPoint, 1);\n      }\n\n      latestProgrammeScript.elements = elements;\n      ApiWrapper.updatePaperEdit(this.props.projectId, this.props.papereditId, latestProgrammeScript).then(json => {\n        if (json.status === 'ok') {\n          this.setState(\n            {\n              // playlist: playlist,\n              lastSaved: new Date(),\n              programmeScript: latestProgrammeScript,\n            },\n            () => {\n              // this.handleUpdatePreview()\n            }\n          );\n        }\n      });\n    }\n  };\n\n  handleAdvancedSelectCheckbox = event => {\n    const target = event.target;\n    this.setState({\n      isAdvancedSelect: target.checked,\n    });\n  };\n\n  handleDeleteProgrammeScriptContent = () => {\n    // eslint-disable-next-line no-restricted-globals\n    const confirmation = confirm('Are you usure you want to delete the content of your programme script?');\n    if (confirmation) {\n      const { programmeScript } = this.state;\n      const latestProgrammeScript = { ...programmeScript };\n      // latestProgrammeScript.elements = [];\n      latestProgrammeScript.elements = [{ ...INSERT_POINT_ELEMENT }];\n      ApiWrapper.updatePaperEdit(this.props.projectId, this.props.papereditId, latestProgrammeScript).then(json => {\n        if (json.status === 'ok') {\n          this.setState(\n            {\n              // playlist: playlist,\n              lastSaved: new Date(),\n              programmeScript: latestProgrammeScript,\n            },\n            () => {\n              this.handleUpdatePreview();\n            }\n          );\n        }\n      });\n    } else {\n      alert('ok no worries, nothing changed');\n    }\n  };\n\n  handleExportVideoPreview = () => {\n    const sequence = this.getSequenceJsonForFfmpegRemix();\n    const programmeScriptTitle = this.state.programmeScript.title;\n    // timeNow -  eg \"3-6-2020_5.41.35PM\"\n    const timeNow = new Date()\n      .toLocaleString()\n      .replace(/\\//g, '-')\n      .replace(/, /g, '_')\n      .replace(/:/g, '.')\n      .replace(/ /g, '');\n    const fileName = `${programmeScriptTitle}_${timeNow}.mp4`;\n    ApiWrapper.exportVideo(sequence, fileName).then(res => {\n      console.log('exported', res);\n    });\n  };\n\n  handleExportAudioPreview = () => {\n    const sequence = this.getSequenceJsonForFfmpegRemix();\n    const programmeScriptTitle = this.state.programmeScript.title;\n    // timeNow -  eg \"3-6-2020_5.41.35PM\"\n    const timeNow = new Date()\n      .toLocaleString()\n      .replace(/\\//g, '-')\n      .replace(/, /g, '_')\n      .replace(/:/g, '.')\n      .replace(/ /g, '');\n    const fileName = `${programmeScriptTitle}_${timeNow}.wav`;\n    ApiWrapper.exportAudio(sequence, fileName, false).then(res => {\n      console.log('exported', res);\n    });\n  };\n\n  handleExportAudioPreviewWithVideoWaveform = ({ waveFormMode, waveFormColor }) => {\n    const sequence = this.getSequenceJsonForFfmpegRemix();\n    const programmeScriptTitle = this.state.programmeScript.title;\n    // timeNow -  eg \"3-6-2020_5.41.35PM\"\n    const timeNow = new Date()\n      .toLocaleString()\n      .replace(/\\//g, '-')\n      .replace(/, /g, '_')\n      .replace(/:/g, '.')\n      .replace(/ /g, '');\n    const fileName = `${programmeScriptTitle}_${timeNow}.mp4`;\n    const waveForm = true;\n    // const waveFormMode = 'cline';\n    ApiWrapper.exportAudio(sequence, fileName, waveForm, waveFormMode, waveFormColor).then(res => {\n      console.log('exported', res);\n    });\n  };\n\n  render() {\n    const position = window.matchMedia('(max-width: 767px)').matches ? true : false;\n    return (\n      <>\n        <Card\n          style={\n            {\n              // backgroundColor:'#eee',\n              // boxShadow: '0 0 10px #ccc'\n            }\n          }\n        >\n          <Card.Body style={{ padding: '1em', paddingTop: '0em', paddingBottom: '0.6em' }}>\n            {!this.state.resetPreview ? <PreviewCanvas playlist={this.state.playlist} width={300} /> : null}\n          </Card.Body>\n          <Card.Body style={{ paddingTop: '0px', paddingBottom: '0.6em' }}>\n            <Row noGutters>\n              <ButtonGroup style={{ width: '100%' }} vertical={position} block>\n                <OverlayTrigger\n                  placement={'top'}\n                  delay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                  overlay={\n                    <Tooltip>\n                      To add a text selection, select text in the transcript, then click this button to add it to the programme script, at the orange\n                      insert point/\n                    </Tooltip>\n                  }\n                >\n                  <Button variant=\"light\" size=\"sm\" onClick={this.handleAddTranscriptSelectionToProgrammeScript}>\n                    <FontAwesomeIcon icon={faPlus} /> Selection\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement={'top'}\n                  delay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                  overlay={\n                    <Tooltip>\n                      Advanced selection - check this box to auto copy across transcript selections to insert point in programme script\n                    </Tooltip>\n                  }\n                >\n                  <Button variant=\"light\" style={{ cursor: 'default' }}>\n                    <input\n                      style={{ cursor: 'pointer' }}\n                      name=\"advancedSelect\"\n                      type=\"checkbox\"\n                      checked={this.state.isAdvancedSelect}\n                      onChange={this.handleAdvancedSelectCheckbox}\n                    />{' '}\n                    <small className={'text-secondary'} style={{ marginBottom: '0em' }}>\n                      {'Auto copy selections'}\n                    </small>\n                  </Button>\n                </OverlayTrigger>\n                <DropdownButton as={ButtonGroup} variant=\"light\" title={<FontAwesomeIcon icon={faListUl} />}>\n                  <ExportMenuItem\n                    tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                    onClick={() => {\n                      this.handleAddTranscriptElementToProgrammeScript('title');\n                    }}\n                    title=\"Add a title header element to the programme script\"\n                    text={\n                      <>\n                        {' '}\n                        <FontAwesomeIcon icon={faHeading} /> Heading\n                      </>\n                    }\n                  />\n                  <ExportMenuItem\n                    tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                    onClick={() => {\n                      this.handleAddTranscriptElementToProgrammeScript('voice-over');\n                    }}\n                    title=\"Add a title voice over element to the programme script\"\n                    text={\n                      <>\n                        {' '}\n                        <FontAwesomeIcon icon={faMicrophoneAlt} /> Voice Over\n                      </>\n                    }\n                  />\n                  <ExportMenuItem\n                    tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                    onClick={() => {\n                      this.handleAddTranscriptElementToProgrammeScript('note');\n                    }}\n                    title=\"Add a note element to the programme script\"\n                    text={\n                      <>\n                        <FontAwesomeIcon icon={faStickyNote} /> Note\n                      </>\n                    }\n                  />\n                </DropdownButton>\n\n                <OverlayTrigger\n                  placement={'top'}\n                  delay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                  overlay={<Tooltip>update programme script audio/video preview</Tooltip>}\n                >\n                  <Button variant=\"light\" onClick={this.handleUpdatePreview}>\n                    <FontAwesomeIcon icon={faSync} />\n                  </Button>\n                </OverlayTrigger>\n\n                <DropdownButton as={ButtonGroup} variant=\"light\" title={<FontAwesomeIcon icon={faShare} />}>\n                  {whichJsEnv() === 'cep' ? (\n                    <>\n                      <ExportMenuItem\n                        tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                        onClick={this.handleCepExportSequence}\n                        title=\"export the programme script as a sequence in Adobe Premiere\"\n                        text={\n                          <>\n                            Premiere - Sequence <FontAwesomeIcon icon={faInfoCircle} />\n                          </>\n                        }\n                      />\n                    </>\n                  ) : (\n                    <>\n                      <ExportMenuItem\n                        tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                        onClick={this.handleExportEDL}\n                        title={\n                          'export EDL, edit decision list, to import the programme script as a sequence in video editing software - Avid, Premiere, Davinci Resolve, for FCPX choose FCPX XML'\n                        }\n                        text={\n                          <>\n                            {' '}\n                            <FontAwesomeIcon icon={faVideo} /> EDL - Video <FontAwesomeIcon icon={faInfoCircle} />\n                          </>\n                        }\n                      />\n                      <ExportMenuItem\n                        tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                        title=\"export FCPX XML, to import the programme script as a sequence in Final Cut Pro X, video editing software\"\n                        onClick={this.handleExportFCPX}\n                        text={\n                          <>\n                            {' '}\n                            <FontAwesomeIcon icon={faVideo} /> FCPX <FontAwesomeIcon icon={faInfoCircle} />\n                          </>\n                        }\n                      />\n                      <Dropdown.Divider />\n                      <ExportMenuItem\n                        tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                        onClick={this.handleExportADL}\n                        title=\"export ADL, audio decision list, to import the programme script as a sequence in audio editing software such as SADiE\"\n                        text={\n                          <>\n                            {' '}\n                            <FontAwesomeIcon icon={faHeadphones} /> ADL - Audio <FontAwesomeIcon icon={faInfoCircle} />\n                          </>\n                        }\n                      />\n                      <ExportMenuItem\n                        tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                        onClick={this.handleExportXML}\n                        title=\"export XML, audio decision list, to import the programme script as a sequence in audio editing software such as Audition\"\n                        text={\n                          <>\n                            {' '}\n                            <FontAwesomeIcon icon={faHeadphones} /> XML - Audition <FontAwesomeIcon icon={faInfoCircle} />\n                          </>\n                        }\n                      />\n                      <Dropdown.Divider />\n                      <ExportMenuItem\n                        tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                        onClick={this.handleExportTxt}\n                        title=\"export Text, export the programme script as a text version\"\n                        text={\n                          <>\n                            {' '}\n                            <FontAwesomeIcon icon={faFileAlt} /> Text File <FontAwesomeIcon icon={faInfoCircle} />\n                          </>\n                        }\n                      />\n                      <ExportMenuItem\n                        tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                        onClick={this.handleExportTxtOnyPaperCuts}\n                        title=\"export Text, export only the text selection in the programme script as a text version\"\n                        text={\n                          <>\n                            {' '}\n                            <FontAwesomeIcon icon={faFileAlt} /> Text File (only text selection) <FontAwesomeIcon icon={faInfoCircle} />\n                          </>\n                        }\n                      />\n                      <ExportMenuItem\n                        tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                        onClick={this.handleExportDocx}\n                        title=\"export docx, export the programme script as a word document\"\n                        text={\n                          <>\n                            <FontAwesomeIcon icon={faFileWord} /> Word Document <FontAwesomeIcon icon={faInfoCircle} />\n                          </>\n                        }\n                      />\n                      <ExportMenuItem\n                        tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                        onClick={this.handleExportDocxWithClipReference}\n                        title=\"export docx, export the programme script as a word document, with clip name and timecode references, for text selections\"\n                        text={\n                          <>\n                            <FontAwesomeIcon icon={faFileWord} /> Word Doc (with ref) <FontAwesomeIcon icon={faInfoCircle} />\n                          </>\n                        }\n                      />\n\n                      {whichJsEnv() === 'electron' ? (\n                        <>\n                          <Dropdown.Divider />\n                          <ExportMenuItem\n                            tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                            onClick={this.handleExportVideoPreview}\n                            title=\"Export mp4 video preview - Experimental feature, at the moment you cannot combine audio and video in the same export.\"\n                            text={\n                              <>\n                                <FontAwesomeIcon icon={faFileVideo} /> Video (mp4) <FontAwesomeIcon icon={faFlask} />{' '}\n                                <FontAwesomeIcon icon={faInfoCircle} />\n                              </>\n                            }\n                          />\n                          <ExportMenuItem\n                            tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                            onClick={this.handleExportAudioPreview}\n                            title=\"Export wav audio preview - Experimental feature, at the moment you cannot combine audio and video in the same export.\"\n                            text={\n                              <>\n                                <FontAwesomeIcon icon={faFileAudio} /> Audio (wav) <FontAwesomeIcon icon={faFlask} />\n                                <FontAwesomeIcon icon={faInfoCircle} />\n                              </>\n                            }\n                          />\n                          <Dropdown.Divider />\n                          <ExportWaveForm\n                            TOOLTIP_DEPLAY_IN_MILLISECONDS={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                            handleExportAudioPreviewWithVideoWaveform={this.handleExportAudioPreviewWithVideoWaveform}\n                            title=\"Export audio preview as video with animated wave form - Experimental feature, at the moment you cannot combine audio and video in the same export.\"\n                            text={\n                              <>\n                                <FontAwesomeIcon icon={faFileAudio} /> Animated Waveform (mp4) <FontAwesomeIcon icon={faFlask} />\n                                <FontAwesomeIcon icon={faInfoCircle} />\n                              </>\n                            }\n                          />\n                        </>\n                      ) : null}\n                      <Dropdown.Divider />\n                      <ExportMenuItem\n                        tootlipDelay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                        onClick={this.handleExportJson}\n                        title=\"export Json, export the programme script as a json file\"\n                        text={\n                          <>\n                            {' '}\n                            <FontAwesomeIcon icon={faFileCode} /> Json <FontAwesomeIcon icon={faInfoCircle} />\n                          </>\n                        }\n                      />\n                    </>\n                  )}\n                </DropdownButton>\n                <OverlayTrigger\n                  placement={'top'}\n                  // delay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                  overlay={<Tooltip>{` Last Saved at ${this.state.lastSaved.toLocaleString()}`}</Tooltip>}\n                >\n                  <Button variant=\"light\" disabled>\n                    <small className={'text-secondary'} style={{ marginBottom: '0em' }}>{`${this.state.lastSaved.toLocaleTimeString()}`}</small>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement={'top'}\n                  delay={TOOLTIP_DEPLAY_IN_MILLISECONDS}\n                  overlay={<Tooltip>Delete programme script content.</Tooltip>}\n                >\n                  <Button variant=\"light\" onClick={this.handleDeleteProgrammeScriptContent}>\n                    <FontAwesomeIcon icon={faTrash} />\n                  </Button>\n                </OverlayTrigger>\n              </ButtonGroup>\n            </Row>\n          </Card.Body>\n          <hr style={{ margin: '0px' }} />\n          <Card.Body style={{ padding: '0px' }}>\n            <article\n              style={{\n                height: '55vh',\n                overflow: 'scroll',\n                padding: '1em',\n                // backgroundColor:'#f9f9f9'\n              }}\n              onDoubleClick={this.handleDoubleClickOnProgrammeScript}\n            >\n              {this.state.programmeScript ? (\n                <Suspense\n                  fallback={\n                    <>\n                      <Skeleton variant=\"text\" />\n                      <Skeleton variant=\"text\" />\n                      <Skeleton variant=\"text\" />\n                      <Skeleton variant=\"text\" />\n                      <Skeleton variant=\"text\" />\n                      <Skeleton variant=\"text\" />\n                      <Skeleton variant=\"text\" />\n                      <Skeleton variant=\"text\" />\n                      <Skeleton variant=\"text\" />\n                      <Skeleton variant=\"text\" />\n                    </>\n                  }\n                >\n                  <ProgrammeScript\n                    programmeScriptElements={this.state.programmeScript.elements}\n                    handleProgrammeScriptOrderChange={this.handleProgrammeScriptOrderChange}\n                    handleDeleteProgrammeScriptElement={this.handleDeleteProgrammeScriptElement}\n                    handleEditProgrammeScriptElement={this.handleEditProgrammeScriptElement}\n                    handleAddTranscriptElementToProgrammeScript={this.handleAddTranscriptElementToProgrammeScript}\n                    handleAddTranscriptSelectionToProgrammeScriptTmpSave={this.handleAddTranscriptSelectionToProgrammeScriptTmpSave}\n                    handleChangeInsertPointPosition={this.handleChangeInsertPointPosition}\n                  />\n                </Suspense>\n              ) : null}\n            </article>\n          </Card.Body>\n        </Card>\n      </>\n    );\n  }\n}\n\nexport default ProgramScript;\n"],"sourceRoot":""}